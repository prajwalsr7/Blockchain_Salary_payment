{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function () {\n    function switchState(source, setState, f) {\n      setState(f);\n      return f(source, setState);\n    }\n    var lowerRE = /[a-z]/;\n    var upperRE = /[A-Z]/;\n    var innerRE = /[a-zA-Z0-9_]/;\n    var digitRE = /[0-9]/;\n    var hexRE = /[0-9A-Fa-f]/;\n    var symbolRE = /[-&*+.\\\\/<>=?^|:]/;\n    var specialRE = /[(),[\\]{}]/;\n    var spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\n    function normal() {\n      return function (source, setState) {\n        if (source.eatWhile(spacesRE)) {\n          return null;\n        }\n        var char = source.next();\n        if (specialRE.test(char)) {\n          return char === '{' && source.eat('-') ? switchState(source, setState, chompMultiComment(1)) : char === '[' && source.match('glsl|') ? switchState(source, setState, chompGlsl) : 'builtin';\n        }\n        if (char === '\\'') {\n          return switchState(source, setState, chompChar);\n        }\n        if (char === '\"') {\n          return source.eat('\"') ? source.eat('\"') ? switchState(source, setState, chompMultiString) : 'string' : switchState(source, setState, chompSingleString);\n        }\n        if (upperRE.test(char)) {\n          source.eatWhile(innerRE);\n          return 'variable-2';\n        }\n        if (lowerRE.test(char)) {\n          var isDef = source.pos === 1;\n          source.eatWhile(innerRE);\n          return isDef ? \"def\" : \"variable\";\n        }\n        if (digitRE.test(char)) {\n          if (char === '0') {\n            if (source.eat(/[xX]/)) {\n              source.eatWhile(hexRE); // should require at least 1\n              return \"number\";\n            }\n          } else {\n            source.eatWhile(digitRE);\n          }\n          if (source.eat('.')) {\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          if (source.eat(/[eE]/)) {\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          return \"number\";\n        }\n        if (symbolRE.test(char)) {\n          if (char === '-' && source.eat('-')) {\n            source.skipToEnd();\n            return \"comment\";\n          }\n          source.eatWhile(symbolRE);\n          return \"keyword\";\n        }\n        if (char === '_') {\n          return \"keyword\";\n        }\n        return \"error\";\n      };\n    }\n    function chompMultiComment(nest) {\n      if (nest == 0) {\n        return normal();\n      }\n      return function (source, setState) {\n        while (!source.eol()) {\n          var char = source.next();\n          if (char == '{' && source.eat('-')) {\n            ++nest;\n          } else if (char == '-' && source.eat('}')) {\n            --nest;\n            if (nest === 0) {\n              setState(normal());\n              return 'comment';\n            }\n          }\n        }\n        setState(chompMultiComment(nest));\n        return 'comment';\n      };\n    }\n    function chompMultiString(source, setState) {\n      while (!source.eol()) {\n        var char = source.next();\n        if (char === '\"' && source.eat('\"') && source.eat('\"')) {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n    function chompSingleString(source, setState) {\n      while (source.skipTo('\\\\\"')) {\n        source.next();\n        source.next();\n      }\n      if (source.skipTo('\"')) {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n    function chompChar(source, setState) {\n      while (source.skipTo(\"\\\\'\")) {\n        source.next();\n        source.next();\n      }\n      if (source.skipTo(\"'\")) {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n    function chompGlsl(source, setState) {\n      while (!source.eol()) {\n        var char = source.next();\n        if (char === '|' && source.eat(']')) {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n    var wellKnownWords = {\n      case: 1,\n      of: 1,\n      as: 1,\n      if: 1,\n      then: 1,\n      else: 1,\n      let: 1,\n      in: 1,\n      type: 1,\n      alias: 1,\n      module: 1,\n      where: 1,\n      import: 1,\n      exposing: 1,\n      port: 1\n    };\n    return {\n      startState: function () {\n        return {\n          f: normal()\n        };\n      },\n      copyState: function (s) {\n        return {\n          f: s.f\n        };\n      },\n      token: function (stream, state) {\n        var type = state.f(stream, function (s) {\n          state.f = s;\n        });\n        var word = stream.current();\n        return wellKnownWords.hasOwnProperty(word) ? 'keyword' : type;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","switchState","source","setState","f","lowerRE","upperRE","innerRE","digitRE","hexRE","symbolRE","specialRE","spacesRE","normal","eatWhile","char","next","test","eat","chompMultiComment","match","chompGlsl","chompChar","chompMultiString","chompSingleString","isDef","pos","skipToEnd","nest","eol","skipTo","wellKnownWords","case","of","as","if","then","else","let","in","type","alias","where","import","exposing","port","startState","copyState","s","token","stream","state","word","current","hasOwnProperty","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/elm/elm.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"elm\", function() {\n\n    function switchState(source, setState, f)\n    {\n      setState(f);\n      return f(source, setState);\n    }\n\n    var lowerRE = /[a-z]/;\n    var upperRE = /[A-Z]/;\n    var innerRE = /[a-zA-Z0-9_]/;\n\n    var digitRE = /[0-9]/;\n    var hexRE = /[0-9A-Fa-f]/;\n    var symbolRE = /[-&*+.\\\\/<>=?^|:]/;\n    var specialRE = /[(),[\\]{}]/;\n    var spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\n    function normal()\n    {\n      return function(source, setState)\n      {\n        if (source.eatWhile(spacesRE))\n        {\n          return null;\n        }\n\n        var char = source.next();\n\n        if (specialRE.test(char))\n        {\n          return (char === '{' && source.eat('-'))\n            ? switchState(source, setState, chompMultiComment(1))\n            : (char === '[' && source.match('glsl|'))\n                ? switchState(source, setState, chompGlsl)\n                : 'builtin';\n        }\n\n        if (char === '\\'')\n        {\n          return switchState(source, setState, chompChar);\n        }\n\n        if (char === '\"')\n        {\n          return source.eat('\"')\n            ? source.eat('\"')\n                ? switchState(source, setState, chompMultiString)\n                : 'string'\n            : switchState(source, setState, chompSingleString);\n        }\n\n        if (upperRE.test(char))\n        {\n          source.eatWhile(innerRE);\n          return 'variable-2';\n        }\n\n        if (lowerRE.test(char))\n        {\n          var isDef = source.pos === 1;\n          source.eatWhile(innerRE);\n          return isDef ? \"def\" : \"variable\";\n        }\n\n        if (digitRE.test(char))\n        {\n          if (char === '0')\n          {\n            if (source.eat(/[xX]/))\n            {\n              source.eatWhile(hexRE); // should require at least 1\n              return \"number\";\n            }\n          }\n          else\n          {\n            source.eatWhile(digitRE);\n          }\n          if (source.eat('.'))\n          {\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          if (source.eat(/[eE]/))\n          {\n            source.eat(/[-+]/);\n            source.eatWhile(digitRE); // should require at least 1\n          }\n          return \"number\";\n        }\n\n        if (symbolRE.test(char))\n        {\n          if (char === '-' && source.eat('-'))\n          {\n            source.skipToEnd();\n            return \"comment\";\n          }\n          source.eatWhile(symbolRE);\n          return \"keyword\";\n        }\n\n        if (char === '_')\n        {\n          return \"keyword\";\n        }\n\n        return \"error\";\n      }\n    }\n\n    function chompMultiComment(nest)\n    {\n      if (nest == 0)\n      {\n        return normal();\n      }\n      return function(source, setState)\n      {\n        while (!source.eol())\n        {\n          var char = source.next();\n          if (char == '{' && source.eat('-'))\n          {\n            ++nest;\n          }\n          else if (char == '-' && source.eat('}'))\n          {\n            --nest;\n            if (nest === 0)\n            {\n              setState(normal());\n              return 'comment';\n            }\n          }\n        }\n        setState(chompMultiComment(nest));\n        return 'comment';\n      }\n    }\n\n    function chompMultiString(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '\"' && source.eat('\"') && source.eat('\"'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    function chompSingleString(source, setState)\n    {\n      while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n      if (source.skipTo('\"'))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompChar(source, setState)\n    {\n      while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n      if (source.skipTo(\"'\"))\n      {\n        source.next();\n        setState(normal());\n        return 'string';\n      }\n      source.skipToEnd();\n      setState(normal());\n      return 'error';\n    }\n\n    function chompGlsl(source, setState)\n    {\n      while (!source.eol())\n      {\n        var char = source.next();\n        if (char === '|' && source.eat(']'))\n        {\n          setState(normal());\n          return 'string';\n        }\n      }\n      return 'string';\n    }\n\n    var wellKnownWords = {\n      case: 1,\n      of: 1,\n      as: 1,\n      if: 1,\n      then: 1,\n      else: 1,\n      let: 1,\n      in: 1,\n      type: 1,\n      alias: 1,\n      module: 1,\n      where: 1,\n      import: 1,\n      exposing: 1,\n      port: 1\n    };\n\n    return {\n      startState: function ()  { return { f: normal() }; },\n      copyState:  function (s) { return { f: s.f }; },\n\n      token: function(stream, state) {\n        var type = state.f(stream, function(s) { state.f = s; });\n        var word = stream.current();\n        return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n      }\n    };\n\n  });\n\n  CodeMirror.defineMIME(\"text/x-elm\", \"elm\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}