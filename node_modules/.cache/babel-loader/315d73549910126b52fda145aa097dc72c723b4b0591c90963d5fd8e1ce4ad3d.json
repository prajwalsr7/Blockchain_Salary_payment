{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function () {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\", \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\", \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\", \"ifequal\", \"endifequal\", \"ifnotequal\", \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\", \"parsed\", \"regroup\", \"reversed\", \"spaceless\", \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\", \"closeblock\", \"openvariable\", \"closevariable\", \"openbrace\", \"closebrace\", \"opencomment\", \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\", \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\", \"endblocktrans\", \"get_available_languages\", \"get_current_language_bidi\", \"plural\"],\n      operator = /^[+\\-*&%=<>!?|~^]/,\n      sign = /^[:\\[\\(\\{]/,\n      atom = [\"true\", \"false\"],\n      number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n    function tokenBase(stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n        //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n          //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    }\n    ;\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","operator","sign","atom","number","RegExp","join","tokenBase","stream","state","ch","peek","incomment","skipTo","skipToEnd","eatWhile","intag","match","instring","next","eat","sol","startState","tokenize","token","blockCommentStart","blockCommentEnd","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/jinja2/jinja2.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function() {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n      \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\",\n      \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n      \"ifequal\", \"endifequal\", \"ifnotequal\",\n      \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n      \"parsed\", \"regroup\", \"reversed\", \"spaceless\",\n      \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n      \"closeblock\", \"openvariable\", \"closevariable\",\n      \"openbrace\", \"closebrace\", \"opencomment\",\n      \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n      \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n      \"endblocktrans\", \"get_available_languages\",\n      \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if(!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if(state.operator) {\n          state.operator = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if(state.sign) {\n          state.sign = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if(state.instring) {\n          if(ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if(ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if(stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if(stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if(stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if(stream.eat(\" \") || stream.sol()) {\n            if(stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if(stream.match(atom)) {\n              return \"atom\";\n            }\n            if(stream.match(number)) {\n              return \"number\";\n            }\n            if(stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if(!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if(ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}