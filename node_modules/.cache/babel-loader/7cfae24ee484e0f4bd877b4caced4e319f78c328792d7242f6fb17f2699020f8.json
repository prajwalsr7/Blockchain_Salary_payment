{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"sieve\", function (config) {\n    function words(str) {\n      var obj = {},\n        words = str.split(\" \");\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n      return obj;\n    }\n    var keywords = words(\"if elsif else stop require\");\n    var atoms = words(\"true false not\");\n    var indentUnit = config.indentUnit;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == \"/\" && stream.eat(\"*\")) {\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      }\n      if (ch === '#') {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (ch == \"\\\"\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (ch == \"(\") {\n        state._indent.push(\"(\");\n        // add virtual angel wings so that editor behaves...\n        // ...more sane in case of broken brackets\n        state._indent.push(\"{\");\n        return null;\n      }\n      if (ch === \"{\") {\n        state._indent.push(\"{\");\n        return null;\n      }\n      if (ch == \")\") {\n        state._indent.pop();\n        state._indent.pop();\n      }\n      if (ch === \"}\") {\n        state._indent.pop();\n        return null;\n      }\n      if (ch == \",\") return null;\n      if (ch == \";\") return null;\n      if (/[{}\\(\\),;]/.test(ch)) return null;\n\n      // 1*DIGIT \"K\" / \"M\" / \"G\"\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\d]/);\n        stream.eat(/[KkMmGg]/);\n        return \"number\";\n      }\n\n      // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n      if (ch == \":\") {\n        stream.eatWhile(/[a-zA-Z_]/);\n        stream.eatWhile(/[a-zA-Z0-9_]/);\n        return \"operator\";\n      }\n      stream.eatWhile(/\\w/);\n      var cur = stream.current();\n\n      // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n      // *(multiline-literal / multiline-dotstart)\n      // \".\" CRLF\n      if (cur == \"text\" && stream.eat(\":\")) {\n        state.tokenize = tokenMultiLineString;\n        return \"string\";\n      }\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return null;\n    }\n    function tokenMultiLineString(stream, state) {\n      state._multiLineString = true;\n      // the first line is special it may contain a comment\n      if (!stream.sol()) {\n        stream.eatSpace();\n        if (stream.peek() == \"#\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n        stream.skipToEnd();\n        return \"string\";\n      }\n      if (stream.next() == \".\" && stream.eol()) {\n        state._multiLineString = false;\n        state.tokenize = tokenBase;\n      }\n      return \"string\";\n    }\n    function tokenCComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while ((ch = stream.next()) != null) {\n        if (maybeEnd && ch == \"/\") {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          ch;\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) break;\n          escaped = !escaped && ch == \"\\\\\";\n        }\n        if (!escaped) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    return {\n      startState: function (base) {\n        return {\n          tokenize: tokenBase,\n          baseIndent: base || 0,\n          _indent: []\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        return (state.tokenize || tokenBase)(stream, state);\n      },\n      indent: function (state, _textAfter) {\n        var length = state._indent.length;\n        if (_textAfter && _textAfter[0] == \"}\") length--;\n        if (length < 0) length = 0;\n        return length * indentUnit;\n      },\n      electricChars: \"}\"\n    };\n  });\n  CodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","words","str","obj","split","i","length","keywords","atoms","indentUnit","tokenBase","stream","state","ch","next","eat","tokenize","tokenCComment","skipToEnd","tokenString","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eatSpace","peek","eol","maybeEnd","quote","escaped","startState","base","baseIndent","token","indent","_textAfter","electricChars","defineMIME"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/sieve/sieve.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sieve\", function(config) {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  var keywords = words(\"if elsif else stop require\");\n  var atoms = words(\"true false not\");\n  var indentUnit = config.indentUnit;\n\n  function tokenBase(stream, state) {\n\n    var ch = stream.next();\n    if (ch == \"/\" && stream.eat(\"*\")) {\n      state.tokenize = tokenCComment;\n      return tokenCComment(stream, state);\n    }\n\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch == \"\\\"\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    if (ch == \"(\") {\n      state._indent.push(\"(\");\n      // add virtual angel wings so that editor behaves...\n      // ...more sane in case of broken brackets\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch === \"{\") {\n      state._indent.push(\"{\");\n      return null;\n    }\n\n    if (ch == \")\")  {\n      state._indent.pop();\n      state._indent.pop();\n    }\n\n    if (ch === \"}\") {\n      state._indent.pop();\n      return null;\n    }\n\n    if (ch == \",\")\n      return null;\n\n    if (ch == \";\")\n      return null;\n\n\n    if (/[{}\\(\\),;]/.test(ch))\n      return null;\n\n    // 1*DIGIT \"K\" / \"M\" / \"G\"\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\d]/);\n      stream.eat(/[KkMmGg]/);\n      return \"number\";\n    }\n\n    // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n    if (ch == \":\") {\n      stream.eatWhile(/[a-zA-Z_]/);\n      stream.eatWhile(/[a-zA-Z0-9_]/);\n\n      return \"operator\";\n    }\n\n    stream.eatWhile(/\\w/);\n    var cur = stream.current();\n\n    // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n    // *(multiline-literal / multiline-dotstart)\n    // \".\" CRLF\n    if ((cur == \"text\") && stream.eat(\":\"))\n    {\n      state.tokenize = tokenMultiLineString;\n      return \"string\";\n    }\n\n    if (keywords.propertyIsEnumerable(cur))\n      return \"keyword\";\n\n    if (atoms.propertyIsEnumerable(cur))\n      return \"atom\";\n\n    return null;\n  }\n\n  function tokenMultiLineString(stream, state)\n  {\n    state._multiLineString = true;\n    // the first line is special it may contain a comment\n    if (!stream.sol()) {\n      stream.eatSpace();\n\n      if (stream.peek() == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      stream.skipToEnd();\n      return \"string\";\n    }\n\n    if ((stream.next() == \".\")  && (stream.eol()))\n    {\n      state._multiLineString = false;\n      state.tokenize = tokenBase;\n    }\n\n    return \"string\";\n  }\n\n  function tokenCComment(stream, state) {\n    var maybeEnd = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (maybeEnd && ch == \"/\") {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped)\n          break;\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  return {\n    startState: function(base) {\n      return {tokenize: tokenBase,\n              baseIndent: base || 0,\n              _indent: []};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace())\n        return null;\n\n      return (state.tokenize || tokenBase)(stream, state);\n    },\n\n    indent: function(state, _textAfter) {\n      var length = state._indent.length;\n      if (_textAfter && (_textAfter[0] == \"}\"))\n        length--;\n\n      if (length <0)\n        length = 0;\n\n      return length * indentUnit;\n    },\n\n    electricChars: \"}\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sieve\", \"sieve\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}