{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pascal\", function () {\n    function words(str) {\n      var obj = {},\n        words = str.split(\" \");\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n      return obj;\n    }\n    var keywords = words(\"absolute and array asm begin case const constructor destructor div do \" + \"downto else end file for function goto if implementation in inherited \" + \"inline interface label mod nil not object of operator or packed procedure \" + \"program record reintroduce repeat self set shl shr string then to type \" + \"unit until uses var while with xor as class dispinterface except exports \" + \"finalization finally initialization inline is library on out packed \" + \"property raise resourcestring threadvar try absolute abstract alias \" + \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" + \"dynamic enumerator experimental export external far far16 forward generic \" + \"helper implements index interrupt iocheck local message name near \" + \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" + \"pascal platform private protected public published read register \" + \"reintroduce result safecall saveregisters softfloat specialize static \" + \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n    var atoms = {\n      \"null\": true\n    };\n    var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == \"#\" && state.startOfLine) {\n        stream.skipToEnd();\n        return \"meta\";\n      }\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (ch == \"(\" && stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (ch == \"{\") {\n        state.tokenize = tokenCommentBraces;\n        return tokenCommentBraces(stream, state);\n      }\n      if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n        return null;\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (ch == \"/\") {\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !escaped) state.tokenize = null;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \")\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function tokenCommentBraces(stream, state) {\n      var ch;\n      while (ch = stream.next()) {\n        if (ch == \"}\") {\n          state.tokenize = null;\n          break;\n        }\n      }\n      return \"comment\";\n    }\n\n    // Interface\n\n    return {\n      startState: function () {\n        return {\n          tokenize: null\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\" || style == \"meta\") return style;\n        return style;\n      },\n      electricChars: \"{}\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","str","obj","split","i","length","keywords","atoms","isOperatorChar","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","tokenCommentBraces","test","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","maybeEnd","startState","token","eatSpace","style","electricChars","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/pascal/pascal.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (ch == \"{\") {\n      state.tokenize = tokenCommentBraces;\n      return tokenCommentBraces(stream, state);\n    }\n    if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenCommentBraces(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"}\") {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}