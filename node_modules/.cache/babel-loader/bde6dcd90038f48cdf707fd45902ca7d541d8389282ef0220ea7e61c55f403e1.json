{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {\n      slash: 0,\n      parenthesis: 1\n    };\n    var stateType = {\n      comment: 0,\n      _string: 1,\n      characterClass: 2\n    };\n    var bracesMode = null;\n    if (config.bracesMode) bracesMode = CodeMirror.getMode(config, config.bracesMode);\n    return {\n      startState: function () {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function (stream, state) {\n        if (!stream) return;\n\n        //check for state changes\n        if (state.stack.length === 0) {\n          //strings\n          if (stream.peek() == '\"' || stream.peek() == \"'\") {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n            state.stack.unshift(stateType._string);\n          } else if (stream.match('/*')) {\n            //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match('(*')) {\n            //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        }\n\n        //return state\n        //stack has\n        switch (state.stack[0]) {\n          case stateType._string:\n            while (state.stack[0] === stateType._string && !stream.eol()) {\n              if (stream.peek() === state.stringType) {\n                stream.next(); // Skip quote\n                state.stack.shift(); // Clear flag\n              } else if (stream.peek() === \"\\\\\") {\n                stream.next();\n                stream.next();\n              } else {\n                stream.match(/^.[^\\\\\\\"\\']*/);\n              }\n            }\n            return state.lhs ? \"property string\" : \"string\";\n          // Token style\n\n          case stateType.comment:\n            while (state.stack[0] === stateType.comment && !stream.eol()) {\n              if (state.commentType === commentType.slash && stream.match('*/')) {\n                state.stack.shift(); // Clear flag\n                state.commentType = null;\n              } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n                state.stack.shift(); // Clear flag\n                state.commentType = null;\n              } else {\n                stream.match(/^.[^\\*]*/);\n              }\n            }\n            return \"comment\";\n          case stateType.characterClass:\n            while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n              if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n                state.stack.shift();\n              }\n            }\n            return \"operator\";\n        }\n        var peek = stream.peek();\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null) state.localState = CodeMirror.startState(bracesMode);\n          var token = bracesMode.token(stream, state.localState),\n            text = stream.current();\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n          return token;\n        }\n\n        //no stack\n        switch (peek) {\n          case \"[\":\n            stream.next();\n            state.stack.unshift(stateType.characterClass);\n            return \"bracket\";\n          case \":\":\n          case \"|\":\n          case \";\":\n            stream.next();\n            return \"operator\";\n          case \"%\":\n            if (stream.match(\"%%\")) {\n              return \"header\";\n            } else if (stream.match(/[%][A-Za-z]+/)) {\n              return \"keyword\";\n            } else if (stream.match(/[%][}]/)) {\n              return \"matchingbracket\";\n            }\n            break;\n          case \"/\":\n            if (stream.match(/[\\/][A-Za-z]+/)) {\n              return \"keyword\";\n            }\n          case \"\\\\\":\n            if (stream.match(/[\\][a-z]+/)) {\n              return \"string-2\";\n            }\n          case \".\":\n            if (stream.match(\".\")) {\n              return \"atom\";\n            }\n          case \"*\":\n          case \"-\":\n          case \"+\":\n          case \"^\":\n            if (stream.match(peek)) {\n              return \"atom\";\n            }\n          case \"$\":\n            if (stream.match(\"$$\")) {\n              return \"builtin\";\n            } else if (stream.match(/[$][0-9]+/)) {\n              return \"variable-3\";\n            }\n          case \"<\":\n            if (stream.match(/<<[a-zA-Z_]+>>/)) {\n              return \"builtin\";\n            }\n        }\n        if (stream.match('//')) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match('return')) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n        return null;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","commentType","slash","parenthesis","stateType","comment","_string","characterClass","bracesMode","getMode","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","text","current","i","skipToEnd","indexOf","eatSpace","defineMIME"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/ebnf/ebnf.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ebnf\", function (config) {\n    var commentType = {slash: 0, parenthesis: 1};\n    var stateType = {comment: 0, _string: 1, characterClass: 2};\n    var bracesMode = null;\n\n    if (config.bracesMode)\n      bracesMode = CodeMirror.getMode(config, config.bracesMode);\n\n    return {\n      startState: function () {\n        return {\n          stringType: null,\n          commentType: null,\n          braced: 0,\n          lhs: true,\n          localState: null,\n          stack: [],\n          inDefinition: false\n        };\n      },\n      token: function (stream, state) {\n        if (!stream) return;\n\n        //check for state changes\n        if (state.stack.length === 0) {\n          //strings\n          if ((stream.peek() == '\"') || (stream.peek() == \"'\")) {\n            state.stringType = stream.peek();\n            stream.next(); // Skip quote\n            state.stack.unshift(stateType._string);\n          } else if (stream.match('/*')) { //comments starting with /*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.slash;\n          } else if (stream.match('(*')) { //comments starting with (*\n            state.stack.unshift(stateType.comment);\n            state.commentType = commentType.parenthesis;\n          }\n        }\n\n        //return state\n        //stack has\n        switch (state.stack[0]) {\n        case stateType._string:\n          while (state.stack[0] === stateType._string && !stream.eol()) {\n            if (stream.peek() === state.stringType) {\n              stream.next(); // Skip quote\n              state.stack.shift(); // Clear flag\n            } else if (stream.peek() === \"\\\\\") {\n              stream.next();\n              stream.next();\n            } else {\n              stream.match(/^.[^\\\\\\\"\\']*/);\n            }\n          }\n          return state.lhs ? \"property string\" : \"string\"; // Token style\n\n        case stateType.comment:\n          while (state.stack[0] === stateType.comment && !stream.eol()) {\n            if (state.commentType === commentType.slash && stream.match('*/')) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n              state.stack.shift(); // Clear flag\n              state.commentType = null;\n            } else {\n              stream.match(/^.[^\\*]*/);\n            }\n          }\n          return \"comment\";\n\n        case stateType.characterClass:\n          while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n            if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n              state.stack.shift();\n            }\n          }\n          return \"operator\";\n        }\n\n        var peek = stream.peek();\n\n        if (bracesMode !== null && (state.braced || peek === \"{\")) {\n          if (state.localState === null)\n            state.localState = CodeMirror.startState(bracesMode);\n\n          var token = bracesMode.token(stream, state.localState),\n          text = stream.current();\n\n          if (!token) {\n            for (var i = 0; i < text.length; i++) {\n              if (text[i] === \"{\") {\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n                state.braced++;\n              } else if (text[i] === \"}\") {\n                state.braced--;\n                if (state.braced === 0) {\n                  token = \"matchingbracket\";\n                }\n              }\n            }\n          }\n          return token;\n        }\n\n        //no stack\n        switch (peek) {\n        case \"[\":\n          stream.next();\n          state.stack.unshift(stateType.characterClass);\n          return \"bracket\";\n        case \":\":\n        case \"|\":\n        case \";\":\n          stream.next();\n          return \"operator\";\n        case \"%\":\n          if (stream.match(\"%%\")) {\n            return \"header\";\n          } else if (stream.match(/[%][A-Za-z]+/)) {\n            return \"keyword\";\n          } else if (stream.match(/[%][}]/)) {\n            return \"matchingbracket\";\n          }\n          break;\n        case \"/\":\n          if (stream.match(/[\\/][A-Za-z]+/)) {\n          return \"keyword\";\n        }\n        case \"\\\\\":\n          if (stream.match(/[\\][a-z]+/)) {\n            return \"string-2\";\n          }\n        case \".\":\n          if (stream.match(\".\")) {\n            return \"atom\";\n          }\n        case \"*\":\n        case \"-\":\n        case \"+\":\n        case \"^\":\n          if (stream.match(peek)) {\n            return \"atom\";\n          }\n        case \"$\":\n          if (stream.match(\"$$\")) {\n            return \"builtin\";\n          } else if (stream.match(/[$][0-9]+/)) {\n            return \"variable-3\";\n          }\n        case \"<\":\n          if (stream.match(/<<[a-zA-Z_]+>>/)) {\n            return \"builtin\";\n          }\n        }\n\n        if (stream.match('//')) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match('return')) {\n          return \"operator\";\n        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n          if (stream.match(/(?=[\\(.])/)) {\n            return \"variable\";\n          } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n            return \"def\";\n          }\n          return \"variable-2\";\n        } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n          stream.next();\n          return \"bracket\";\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n        return null;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-ebnf\", \"ebnf\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}