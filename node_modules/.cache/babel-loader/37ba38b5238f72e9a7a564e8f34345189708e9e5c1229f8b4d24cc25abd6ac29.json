{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"toml\", function () {\n    return {\n      startState: function () {\n        return {\n          inString: false,\n          stringType: \"\",\n          lhs: true,\n          inArray: 0\n        };\n      },\n      token: function (stream, state) {\n        //check for state changes\n        if (!state.inString && (stream.peek() == '\"' || stream.peek() == \"'\")) {\n          state.stringType = stream.peek();\n          stream.next(); // Skip quote\n          state.inString = true; // Update state\n        }\n        if (stream.sol() && state.inArray === 0) {\n          state.lhs = true;\n        }\n        //return state\n        if (state.inString) {\n          while (state.inString && !stream.eol()) {\n            if (stream.peek() === state.stringType) {\n              stream.next(); // Skip quote\n              state.inString = false; // Clear flag\n            } else if (stream.peek() === '\\\\') {\n              stream.next();\n              stream.next();\n            } else {\n              stream.match(/^.[^\\\\\\\"\\']*/);\n            }\n          }\n          return state.lhs ? \"property string\" : \"string\"; // Token style\n        } else if (state.inArray && stream.peek() === ']') {\n          stream.next();\n          state.inArray--;\n          return 'bracket';\n        } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n          stream.next(); //skip closing ]\n          // array of objects has an extra open & close []\n          if (stream.peek() === ']') stream.next();\n          return \"atom\";\n        } else if (stream.peek() === \"#\") {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.eatSpace()) {\n          return null;\n        } else if (state.lhs && stream.eatWhile(function (c) {\n          return c != '=' && c != ' ';\n        })) {\n          return \"property\";\n        } else if (state.lhs && stream.peek() === \"=\") {\n          stream.next();\n          state.lhs = false;\n          return null;\n        } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n          return 'atom'; //date\n        } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n          return 'atom';\n        } else if (!state.lhs && stream.peek() === '[') {\n          state.inArray++;\n          stream.next();\n          return 'bracket';\n        } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n          return 'number';\n        } else if (!stream.eatSpace()) {\n          stream.next();\n        }\n        return null;\n      }\n    };\n  });\n  CodeMirror.defineMIME('text/x-toml', 'toml');\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","startState","inString","stringType","lhs","inArray","token","stream","state","peek","next","sol","eol","match","skipTo","skipToEnd","eatSpace","eatWhile","c","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/toml/toml.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"toml\", function () {\n  return {\n    startState: function () {\n      return {\n        inString: false,\n        stringType: \"\",\n        lhs: true,\n        inArray: 0\n      };\n    },\n    token: function (stream, state) {\n      //check for state changes\n      if (!state.inString && ((stream.peek() == '\"') || (stream.peek() == \"'\"))) {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.inString = true; // Update state\n      }\n      if (stream.sol() && state.inArray === 0) {\n        state.lhs = true;\n      }\n      //return state\n      if (state.inString) {\n        while (state.inString && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n            state.inString = false; // Clear flag\n          } else if (stream.peek() === '\\\\') {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n        return state.lhs ? \"property string\" : \"string\"; // Token style\n      } else if (state.inArray && stream.peek() === ']') {\n        stream.next();\n        state.inArray--;\n        return 'bracket';\n      } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n        stream.next();//skip closing ]\n        // array of objects has an extra open & close []\n        if (stream.peek() === ']') stream.next();\n        return \"atom\";\n      } else if (stream.peek() === \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (stream.eatSpace()) {\n        return null;\n      } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {\n        return \"property\";\n      } else if (state.lhs && stream.peek() === \"=\") {\n        stream.next();\n        state.lhs = false;\n        return null;\n      } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n        return 'atom'; //date\n      } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n        return 'atom';\n      } else if (!state.lhs && stream.peek() === '[') {\n        state.inArray++;\n        stream.next();\n        return 'bracket';\n      } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n        return 'number';\n      } else if (!stream.eatSpace()) {\n        stream.next();\n      }\n      return null;\n    }\n  };\n});\n\nCodeMirror.defineMIME('text/x-toml', 'toml');\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}