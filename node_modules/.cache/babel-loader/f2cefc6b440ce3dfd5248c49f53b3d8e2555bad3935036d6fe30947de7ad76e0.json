{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"turtle\", function (config) {\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    function wordRegexp(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n    }\n    var ops = wordRegexp([]);\n    var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n    var operatorChars = /[*+\\-<>=&|]/;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      curPunc = null;\n      if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n        stream.match(/^[^\\s\\u00a0>]*>?/);\n        return \"atom\";\n      } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenLiteral(ch);\n        return state.tokenize(stream, state);\n      } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return null;\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else if (ch == \":\") {\n        return \"operator\";\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n        if (stream.peek() == \":\") {\n          return \"variable-3\";\n        } else {\n          var word = stream.current();\n          if (keywords.test(word)) {\n            return \"meta\";\n          }\n          if (ch >= \"A\" && ch <= \"Z\") {\n            return \"comment\";\n          } else {\n            return \"keyword\";\n          }\n        }\n        var word = stream.current();\n        if (ops.test(word)) return null;else if (keywords.test(word)) return \"meta\";else return \"variable\";\n      }\n    }\n    function tokenLiteral(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          ch;\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            state.tokenize = tokenBase;\n            break;\n          }\n          escaped = !escaped && ch == \"\\\\\";\n        }\n        return \"string\";\n      };\n    }\n    function pushContext(state, type, col) {\n      state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    }\n    function popContext(state) {\n      state.indent = state.context.indent;\n      state.context = state.context.prev;\n    }\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function (stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) state.context.align = false;\n          state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n          state.context.align = true;\n        }\n        if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type == \"pattern\") popContext(state);\n          if (state.context && curPunc == state.context.type) popContext(state);\n        } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function (state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") context = context.prev;\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : indentUnit);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","curPunc","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","eatWhile","peek","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/turtle/turtle.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"turtle\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([]);\n  var keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\n  var operatorChars = /[*+\\-<>=&|]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return null;\n    }\n    else if (ch == \":\") {\n          return \"operator\";\n        } else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if(stream.peek() == \":\") {\n        return \"variable-3\";\n      } else {\n             var word = stream.current();\n\n             if(keywords.test(word)) {\n                        return \"meta\";\n             }\n\n             if(ch >= \"A\" && ch <= \"Z\") {\n                    return \"comment\";\n                 } else {\n                        return \"keyword\";\n                 }\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return null;\n      else if (keywords.test(word))\n        return \"meta\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) popContext(state);\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/turtle\", \"turtle\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}