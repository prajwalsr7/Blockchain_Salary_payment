{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Modelica support for CodeMirror, copyright (c) by Lennart Ochel\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"modelica\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit;\n    var keywords = parserConfig.keywords || {};\n    var builtin = parserConfig.builtin || {};\n    var atoms = parserConfig.atoms || {};\n    var isSingleOperatorChar = /[;=\\(:\\),{}.*<>+\\-\\/^\\[\\]]/;\n    var isDoubleOperatorChar = /(:=|<=|>=|==|<>|\\.\\+|\\.\\-|\\.\\*|\\.\\/|\\.\\^)/;\n    var isDigit = /[0-9]/;\n    var isNonDigit = /[_a-zA-Z]/;\n    function tokenLineComment(stream, state) {\n      stream.skipToEnd();\n      state.tokenize = null;\n      return \"comment\";\n    }\n    function tokenBlockComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if (maybeEnd && ch == \"/\") {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function tokenString(stream, state) {\n      var escaped = false,\n        ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == '\"' && !escaped) {\n          state.tokenize = null;\n          state.sol = false;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    }\n    function tokenIdent(stream, state) {\n      stream.eatWhile(isDigit);\n      while (stream.eat(isDigit) || stream.eat(isNonDigit)) {}\n      var cur = stream.current();\n      if (state.sol && (cur == \"package\" || cur == \"model\" || cur == \"when\" || cur == \"connector\")) state.level++;else if (state.sol && cur == \"end\" && state.level > 0) state.level--;\n      state.tokenize = null;\n      state.sol = false;\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";else if (builtin.propertyIsEnumerable(cur)) return \"builtin\";else if (atoms.propertyIsEnumerable(cur)) return \"atom\";else return \"variable\";\n    }\n    function tokenQIdent(stream, state) {\n      while (stream.eat(/[^']/)) {}\n      state.tokenize = null;\n      state.sol = false;\n      if (stream.eat(\"'\")) return \"variable\";else return \"error\";\n    }\n    function tokenUnsignedNumber(stream, state) {\n      stream.eatWhile(isDigit);\n      if (stream.eat('.')) {\n        stream.eatWhile(isDigit);\n      }\n      if (stream.eat('e') || stream.eat('E')) {\n        if (!stream.eat('-')) stream.eat('+');\n        stream.eatWhile(isDigit);\n      }\n      state.tokenize = null;\n      state.sol = false;\n      return \"number\";\n    }\n\n    // Interface\n    return {\n      startState: function () {\n        return {\n          tokenize: null,\n          level: 0,\n          sol: true\n        };\n      },\n      token: function (stream, state) {\n        if (state.tokenize != null) {\n          return state.tokenize(stream, state);\n        }\n        if (stream.sol()) {\n          state.sol = true;\n        }\n\n        // WHITESPACE\n        if (stream.eatSpace()) {\n          state.tokenize = null;\n          return null;\n        }\n        var ch = stream.next();\n\n        // LINECOMMENT\n        if (ch == '/' && stream.eat('/')) {\n          state.tokenize = tokenLineComment;\n        }\n        // BLOCKCOMMENT\n        else if (ch == '/' && stream.eat('*')) {\n          state.tokenize = tokenBlockComment;\n        }\n        // TWO SYMBOL TOKENS\n        else if (isDoubleOperatorChar.test(ch + stream.peek())) {\n          stream.next();\n          state.tokenize = null;\n          return \"operator\";\n        }\n        // SINGLE SYMBOL TOKENS\n        else if (isSingleOperatorChar.test(ch)) {\n          state.tokenize = null;\n          return \"operator\";\n        }\n        // IDENT\n        else if (isNonDigit.test(ch)) {\n          state.tokenize = tokenIdent;\n        }\n        // Q-IDENT\n        else if (ch == \"'\" && stream.peek() && stream.peek() != \"'\") {\n          state.tokenize = tokenQIdent;\n        }\n        // STRING\n        else if (ch == '\"') {\n          state.tokenize = tokenString;\n        }\n        // UNSIGNED_NUMBER\n        else if (isDigit.test(ch)) {\n          state.tokenize = tokenUnsignedNumber;\n        }\n        // ERROR\n        else {\n          state.tokenize = null;\n          return \"error\";\n        }\n        return state.tokenize(stream, state);\n      },\n      indent: function (state, textAfter) {\n        if (state.tokenize != null) return CodeMirror.Pass;\n        var level = state.level;\n        if (/(algorithm)/.test(textAfter)) level--;\n        if (/(equation)/.test(textAfter)) level--;\n        if (/(initial algorithm)/.test(textAfter)) level--;\n        if (/(initial equation)/.test(textAfter)) level--;\n        if (/(end)/.test(textAfter)) level--;\n        if (level > 0) return indentUnit * level;else return 0;\n      },\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\"\n    };\n  });\n  function words(str) {\n    var obj = {},\n      words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var modelicaKeywords = \"algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within\";\n  var modelicaBuiltin = \"abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh\";\n  var modelicaAtoms = \"Real Boolean Integer String\";\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop)) words.push(prop);\n    }\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.atoms);\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n    for (var i = 0; i < mimes.length; ++i) CodeMirror.defineMIME(mimes[i], mode);\n  }\n  def([\"text/x-modelica\"], {\n    name: \"modelica\",\n    keywords: words(modelicaKeywords),\n    builtin: words(modelicaBuiltin),\n    atoms: words(modelicaAtoms)\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","keywords","builtin","atoms","isSingleOperatorChar","isDoubleOperatorChar","isDigit","isNonDigit","tokenLineComment","stream","state","skipToEnd","tokenize","tokenBlockComment","maybeEnd","ch","next","tokenString","escaped","sol","tokenIdent","eatWhile","eat","cur","current","level","propertyIsEnumerable","tokenQIdent","tokenUnsignedNumber","startState","token","eatSpace","test","peek","indent","textAfter","Pass","blockCommentStart","blockCommentEnd","lineComment","words","str","obj","split","i","length","modelicaKeywords","modelicaBuiltin","modelicaAtoms","def","mimes","mode","add","prop","hasOwnProperty","push","helperType","registerHelper","defineMIME","name"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/modelica/modelica.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Modelica support for CodeMirror, copyright (c) by Lennart Ochel\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})\n\n(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"modelica\", function(config, parserConfig) {\n\n    var indentUnit = config.indentUnit;\n    var keywords = parserConfig.keywords || {};\n    var builtin = parserConfig.builtin || {};\n    var atoms = parserConfig.atoms || {};\n\n    var isSingleOperatorChar = /[;=\\(:\\),{}.*<>+\\-\\/^\\[\\]]/;\n    var isDoubleOperatorChar = /(:=|<=|>=|==|<>|\\.\\+|\\.\\-|\\.\\*|\\.\\/|\\.\\^)/;\n    var isDigit = /[0-9]/;\n    var isNonDigit = /[_a-zA-Z]/;\n\n    function tokenLineComment(stream, state) {\n      stream.skipToEnd();\n      state.tokenize = null;\n      return \"comment\";\n    }\n\n    function tokenBlockComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (maybeEnd && ch == \"/\") {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n\n    function tokenString(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == '\"' && !escaped) {\n          state.tokenize = null;\n          state.sol = false;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n\n      return \"string\";\n    }\n\n    function tokenIdent(stream, state) {\n      stream.eatWhile(isDigit);\n      while (stream.eat(isDigit) || stream.eat(isNonDigit)) { }\n\n\n      var cur = stream.current();\n\n      if(state.sol && (cur == \"package\" || cur == \"model\" || cur == \"when\" || cur == \"connector\")) state.level++;\n      else if(state.sol && cur == \"end\" && state.level > 0) state.level--;\n\n      state.tokenize = null;\n      state.sol = false;\n\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      else if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n      else if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      else return \"variable\";\n    }\n\n    function tokenQIdent(stream, state) {\n      while (stream.eat(/[^']/)) { }\n\n      state.tokenize = null;\n      state.sol = false;\n\n      if(stream.eat(\"'\"))\n        return \"variable\";\n      else\n        return \"error\";\n    }\n\n    function tokenUnsignedNumber(stream, state) {\n      stream.eatWhile(isDigit);\n      if (stream.eat('.')) {\n        stream.eatWhile(isDigit);\n      }\n      if (stream.eat('e') || stream.eat('E')) {\n        if (!stream.eat('-'))\n          stream.eat('+');\n        stream.eatWhile(isDigit);\n      }\n\n      state.tokenize = null;\n      state.sol = false;\n      return \"number\";\n    }\n\n    // Interface\n    return {\n      startState: function() {\n        return {\n          tokenize: null,\n          level: 0,\n          sol: true\n        };\n      },\n\n      token: function(stream, state) {\n        if(state.tokenize != null) {\n          return state.tokenize(stream, state);\n        }\n\n        if(stream.sol()) {\n          state.sol = true;\n        }\n\n        // WHITESPACE\n        if(stream.eatSpace()) {\n          state.tokenize = null;\n          return null;\n        }\n\n        var ch = stream.next();\n\n        // LINECOMMENT\n        if(ch == '/' && stream.eat('/')) {\n          state.tokenize = tokenLineComment;\n        }\n        // BLOCKCOMMENT\n        else if(ch == '/' && stream.eat('*')) {\n          state.tokenize = tokenBlockComment;\n        }\n        // TWO SYMBOL TOKENS\n        else if(isDoubleOperatorChar.test(ch+stream.peek())) {\n          stream.next();\n          state.tokenize = null;\n          return \"operator\";\n        }\n        // SINGLE SYMBOL TOKENS\n        else if(isSingleOperatorChar.test(ch)) {\n          state.tokenize = null;\n          return \"operator\";\n        }\n        // IDENT\n        else if(isNonDigit.test(ch)) {\n          state.tokenize = tokenIdent;\n        }\n        // Q-IDENT\n        else if(ch == \"'\" && stream.peek() && stream.peek() != \"'\") {\n          state.tokenize = tokenQIdent;\n        }\n        // STRING\n        else if(ch == '\"') {\n          state.tokenize = tokenString;\n        }\n        // UNSIGNED_NUMBER\n        else if(isDigit.test(ch)) {\n          state.tokenize = tokenUnsignedNumber;\n        }\n        // ERROR\n        else {\n          state.tokenize = null;\n          return \"error\";\n        }\n\n        return state.tokenize(stream, state);\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != null) return CodeMirror.Pass;\n\n        var level = state.level;\n        if(/(algorithm)/.test(textAfter)) level--;\n        if(/(equation)/.test(textAfter)) level--;\n        if(/(initial algorithm)/.test(textAfter)) level--;\n        if(/(initial equation)/.test(textAfter)) level--;\n        if(/(end)/.test(textAfter)) level--;\n\n        if(level > 0)\n          return indentUnit*level;\n        else\n          return 0;\n      },\n\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i=0; i<words.length; ++i)\n      obj[words[i]] = true;\n    return obj;\n  }\n\n  var modelicaKeywords = \"algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within\";\n  var modelicaBuiltin = \"abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh\";\n  var modelicaAtoms = \"Real Boolean Integer String\";\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\")\n      mimes = [mimes];\n\n    var words = [];\n\n    function add(obj) {\n      if (obj)\n        for (var prop in obj)\n          if (obj.hasOwnProperty(prop))\n            words.push(prop);\n    }\n\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.atoms);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i=0; i<mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-modelica\"], {\n    name: \"modelica\",\n    keywords: words(modelicaKeywords),\n    builtin: words(modelicaBuiltin),\n    atoms: words(modelicaAtoms)\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}