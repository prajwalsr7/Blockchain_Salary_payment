{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n  This MUMPS Language script was constructed using vbscript.js as a template.\n*/\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"mumps\", function () {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\n    var doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\n    var singleDelimiters = new RegExp(\"^[\\\\.,:]\");\n    var brackets = new RegExp(\"[()]\");\n    var identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\n    var commandKeywords = [\"break\", \"close\", \"do\", \"else\", \"for\", \"goto\", \"halt\", \"hang\", \"if\", \"job\", \"kill\", \"lock\", \"merge\", \"new\", \"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"];\n    // The following list includes intrinsic functions _and_ special variables\n    var intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\n    var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\n    var command = wordRegexp(commandKeywords);\n    function tokenBase(stream, state) {\n      if (stream.sol()) {\n        state.label = true;\n        state.commandMode = 0;\n      }\n\n      // The <space> character has meaning in MUMPS. Ignoring consecutive\n      // spaces would interfere with interpreting whether the next non-space\n      // character belongs to the command or argument context.\n\n      // Examine each character and update a mode variable whose interpretation is:\n      //   >0 => command    0 => argument    <0 => command post-conditional\n      var ch = stream.peek();\n      if (ch == \" \" || ch == \"\\t\") {\n        // Pre-process <space>\n        state.label = false;\n        if (state.commandMode == 0) state.commandMode = 1;else if (state.commandMode < 0 || state.commandMode == 2) state.commandMode = 0;\n      } else if (ch != \".\" && state.commandMode > 0) {\n        if (ch == \":\") state.commandMode = -1; // SIS - Command post-conditional\n        else state.commandMode = 2;\n      }\n\n      // Do not color parameter list as line tag\n      if (ch === \"(\" || ch === \"\\u0009\") state.label = false;\n\n      // MUMPS comment starts with \";\"\n      if (ch === \";\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n      if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/)) return \"number\";\n\n      // Handle Strings\n      if (ch == '\"') {\n        if (stream.skipTo('\"')) {\n          stream.next();\n          return \"string\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      }\n\n      // Handle operators and Delimiters\n      if (stream.match(doubleOperators) || stream.match(singleOperators)) return \"operator\";\n\n      // Prevents leading \".\" in DO block from falling through to error\n      if (stream.match(singleDelimiters)) return null;\n      if (brackets.test(ch)) {\n        stream.next();\n        return \"bracket\";\n      }\n      if (state.commandMode > 0 && stream.match(command)) return \"variable-2\";\n      if (stream.match(intrinsicFuncs)) return \"builtin\";\n      if (stream.match(identifiers)) return \"variable\";\n\n      // Detect dollar-sign when not a documented intrinsic function\n      // \"^\" may introduce a GVN or SSVN - Color same as function\n      if (ch === \"$\" || ch === \"^\") {\n        stream.next();\n        return \"builtin\";\n      }\n\n      // MUMPS Indirection\n      if (ch === \"@\") {\n        stream.next();\n        return \"string-2\";\n      }\n      if (/[\\w%]/.test(ch)) {\n        stream.eatWhile(/[\\w%]/);\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return \"error\";\n    }\n    return {\n      startState: function () {\n        return {\n          label: false,\n          commandMode: 0\n        };\n      },\n      token: function (stream, state) {\n        var style = tokenBase(stream, state);\n        if (state.label) return \"tag\";\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-mumps\", \"mumps\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","wordRegexp","words","RegExp","join","singleOperators","doubleOperators","singleDelimiters","brackets","identifiers","commandKeywords","intrinsicFuncsWords","intrinsicFuncs","command","tokenBase","stream","state","sol","label","commandMode","ch","peek","skipToEnd","match","skipTo","next","test","eatWhile","startState","token","style","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/mumps/mumps.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n  This MUMPS Language script was constructed using vbscript.js as a template.\n*/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"mumps\", function() {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\n    var doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\n    var singleDelimiters = new RegExp(\"^[\\\\.,:]\");\n    var brackets = new RegExp(\"[()]\");\n    var identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\n    var commandKeywords = [\"break\",\"close\",\"do\",\"else\",\"for\",\"goto\", \"halt\", \"hang\", \"if\", \"job\",\"kill\",\"lock\",\"merge\",\"new\",\"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\",\"c\",\"d\",\"e\",\"f\",\"g\", \"h\", \"i\", \"j\",\"k\",\"l\",\"m\",\"n\",\"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"];\n    // The following list includes intrinsic functions _and_ special variables\n    var intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\n    var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\n    var command = wordRegexp(commandKeywords);\n\n    function tokenBase(stream, state) {\n      if (stream.sol()) {\n        state.label = true;\n        state.commandMode = 0;\n      }\n\n      // The <space> character has meaning in MUMPS. Ignoring consecutive\n      // spaces would interfere with interpreting whether the next non-space\n      // character belongs to the command or argument context.\n\n      // Examine each character and update a mode variable whose interpretation is:\n      //   >0 => command    0 => argument    <0 => command post-conditional\n      var ch = stream.peek();\n\n      if (ch == \" \" || ch == \"\\t\") { // Pre-process <space>\n        state.label = false;\n        if (state.commandMode == 0)\n          state.commandMode = 1;\n        else if ((state.commandMode < 0) || (state.commandMode == 2))\n          state.commandMode = 0;\n      } else if ((ch != \".\") && (state.commandMode > 0)) {\n        if (ch == \":\")\n          state.commandMode = -1;   // SIS - Command post-conditional\n        else\n          state.commandMode = 2;\n      }\n\n      // Do not color parameter list as line tag\n      if ((ch === \"(\") || (ch === \"\\u0009\"))\n        state.label = false;\n\n      // MUMPS comment starts with \";\"\n      if (ch === \";\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n      if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/))\n        return \"number\";\n\n      // Handle Strings\n      if (ch == '\"') {\n        if (stream.skipTo('\"')) {\n          stream.next();\n          return \"string\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      }\n\n      // Handle operators and Delimiters\n      if (stream.match(doubleOperators) || stream.match(singleOperators))\n        return \"operator\";\n\n      // Prevents leading \".\" in DO block from falling through to error\n      if (stream.match(singleDelimiters))\n        return null;\n\n      if (brackets.test(ch)) {\n        stream.next();\n        return \"bracket\";\n      }\n\n      if (state.commandMode > 0 && stream.match(command))\n        return \"variable-2\";\n\n      if (stream.match(intrinsicFuncs))\n        return \"builtin\";\n\n      if (stream.match(identifiers))\n        return \"variable\";\n\n      // Detect dollar-sign when not a documented intrinsic function\n      // \"^\" may introduce a GVN or SSVN - Color same as function\n      if (ch === \"$\" || ch === \"^\") {\n        stream.next();\n        return \"builtin\";\n      }\n\n      // MUMPS Indirection\n      if (ch === \"@\") {\n        stream.next();\n        return \"string-2\";\n      }\n\n      if (/[\\w%]/.test(ch)) {\n        stream.eatWhile(/[\\w%]/);\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return \"error\";\n    }\n\n    return {\n      startState: function() {\n        return {\n          label: false,\n          commandMode: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var style = tokenBase(stream, state);\n        if (state.label) return \"tag\";\n        return style;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-mumps\", \"mumps\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}