{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Mathematica mode copyright (c) 2015 by Calin Barbat\n// Based on code by Patrick Scheibe (halirutan)\n// See: https://github.com/halirutan/Mathematica-Source-Highlighting/tree/master/src/lang-mma.js\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode('mathematica', function (_config, _parserConfig) {\n    // used pattern building blocks\n    var Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\n    var pBase = \"(?:\\\\d+)\";\n    var pFloat = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\n    var pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\n    var pPrecision = \"(?:`(?:`?\" + pFloat + \")?)\";\n\n    // regular expressions\n    var reBaseForm = new RegExp('(?:' + pBase + '(?:\\\\^\\\\^' + pFloatBase + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\n    var reFloatForm = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\n    var reIdInContext = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n    function tokenBase(stream, state) {\n      var ch;\n\n      // get next character\n      ch = stream.next();\n\n      // string\n      if (ch === '\"') {\n        state.tokenize = tokenString;\n        return state.tokenize(stream, state);\n      }\n\n      // comment\n      if (ch === '(') {\n        if (stream.eat('*')) {\n          state.commentLevel++;\n          state.tokenize = tokenComment;\n          return state.tokenize(stream, state);\n        }\n      }\n\n      // go back one character\n      stream.backUp(1);\n\n      // look for numbers\n      // Numbers in a baseform\n      if (stream.match(reBaseForm, true, false)) {\n        return 'number';\n      }\n\n      // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n      // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n      if (stream.match(reFloatForm, true, false)) {\n        return 'number';\n      }\n\n      /* In[23] and Out[34] */\n      if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n        return 'atom';\n      }\n\n      // usage\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n        return 'meta';\n      }\n\n      // message\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n        return 'string-2';\n      }\n\n      // this makes a look-ahead match for something like variable:{_Integer}\n      // the match is then forwarded to the mma-patterns tokenizer.\n      if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n        return 'variable-2';\n      }\n\n      // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n      // Cannot start with a number, but can have numbers at any other position. Examples\n      // blub__Integer, a1_, b34_Integer32\n      if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n        return 'variable-2';\n      }\n      if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n        return 'variable-2';\n      }\n      if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n        return 'variable-2';\n      }\n\n      // Named characters in Mathematica, like \\[Gamma].\n      if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n        return 'variable-3';\n      }\n\n      // Match all braces separately\n      if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n        return 'bracket';\n      }\n\n      // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n      // only one.\n      if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n        return 'variable-2';\n      }\n\n      // Literals like variables, keywords, functions\n      if (stream.match(reIdInContext, true, false)) {\n        return 'keyword';\n      }\n\n      // operators. Note that operators like @@ or /; are matched separately for each symbol.\n      if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n        return 'operator';\n      }\n\n      // everything else is an error\n      stream.next(); // advance the stream.\n      return 'error';\n    }\n    function tokenString(stream, state) {\n      var next,\n        end = false,\n        escaped = false;\n      while ((next = stream.next()) != null) {\n        if (next === '\"' && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next === '\\\\';\n      }\n      if (end && !escaped) {\n        state.tokenize = tokenBase;\n      }\n      return 'string';\n    }\n    ;\n    function tokenComment(stream, state) {\n      var prev, next;\n      while (state.commentLevel > 0 && (next = stream.next()) != null) {\n        if (prev === '(' && next === '*') state.commentLevel++;\n        if (prev === '*' && next === ')') state.commentLevel--;\n        prev = next;\n      }\n      if (state.commentLevel <= 0) {\n        state.tokenize = tokenBase;\n      }\n      return 'comment';\n    }\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          commentLevel: 0\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\"\n    };\n  });\n  CodeMirror.defineMIME('text/x-mathematica', {\n    name: 'mathematica'\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","_parserConfig","Identifier","pBase","pFloat","pFloatBase","pPrecision","reBaseForm","RegExp","reFloatForm","reIdInContext","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","backUp","match","end","escaped","prev","startState","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME","name"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/mathematica/mathematica.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Mathematica mode copyright (c) 2015 by Calin Barbat\n// Based on code by Patrick Scheibe (halirutan)\n// See: https://github.com/halirutan/Mathematica-Source-Highlighting/tree/master/src/lang-mma.js\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('mathematica', function(_config, _parserConfig) {\n\n  // used pattern building blocks\n  var Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\n  var pBase      = \"(?:\\\\d+)\";\n  var pFloat     = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\n  var pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\n  var pPrecision = \"(?:`(?:`?\"+pFloat+\")?)\";\n\n  // regular expressions\n  var reBaseForm        = new RegExp('(?:'+pBase+'(?:\\\\^\\\\^'+pFloatBase+pPrecision+'?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\n  var reFloatForm       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\n  var reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\n  function tokenBase(stream, state) {\n    var ch;\n\n    // get next character\n    ch = stream.next();\n\n    // string\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n\n    // comment\n    if (ch === '(') {\n      if (stream.eat('*')) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n\n    // go back one character\n    stream.backUp(1);\n\n    // look for numbers\n    // Numbers in a baseform\n    if (stream.match(reBaseForm, true, false)) {\n      return 'number';\n    }\n\n    // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n    // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n    if (stream.match(reFloatForm, true, false)) {\n      return 'number';\n    }\n\n    /* In[23] and Out[34] */\n    if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n      return 'atom';\n    }\n\n    // usage\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n      return 'meta';\n    }\n\n    // message\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n      return 'string-2';\n    }\n\n    // this makes a look-ahead match for something like variable:{_Integer}\n    // the match is then forwarded to the mma-patterns tokenizer.\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n      return 'variable-2';\n    }\n\n    // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n    // Cannot start with a number, but can have numbers at any other position. Examples\n    // blub__Integer, a1_, b34_Integer32\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n      return 'variable-2';\n    }\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n      return 'variable-2';\n    }\n    if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n      return 'variable-2';\n    }\n\n    // Named characters in Mathematica, like \\[Gamma].\n    if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n      return 'variable-3';\n    }\n\n    // Match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n      return 'bracket';\n    }\n\n    // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n    // only one.\n    if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n      return 'variable-2';\n    }\n\n    // Literals like variables, keywords, functions\n    if (stream.match(reIdInContext, true, false)) {\n      return 'keyword';\n    }\n\n    // operators. Note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n      return 'operator';\n    }\n\n    // everything else is an error\n    stream.next(); // advance the stream.\n    return 'error';\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-mathematica', {\n  name: 'mathematica'\n});\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}