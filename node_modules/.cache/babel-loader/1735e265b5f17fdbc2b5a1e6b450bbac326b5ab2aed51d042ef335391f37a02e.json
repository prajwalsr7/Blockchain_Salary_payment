{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"fcl\", function (config) {\n    var indentUnit = config.indentUnit;\n    var keywords = {\n      \"term\": true,\n      \"method\": true,\n      \"accu\": true,\n      \"rule\": true,\n      \"then\": true,\n      \"is\": true,\n      \"and\": true,\n      \"or\": true,\n      \"if\": true,\n      \"default\": true\n    };\n    var start_blocks = {\n      \"var_input\": true,\n      \"var_output\": true,\n      \"fuzzify\": true,\n      \"defuzzify\": true,\n      \"function_block\": true,\n      \"ruleblock\": true\n    };\n    var end_blocks = {\n      \"end_ruleblock\": true,\n      \"end_defuzzify\": true,\n      \"end_function_block\": true,\n      \"end_fuzzify\": true,\n      \"end_var\": true\n    };\n    var atoms = {\n      \"true\": true,\n      \"false\": true,\n      \"nan\": true,\n      \"real\": true,\n      \"min\": true,\n      \"max\": true,\n      \"cog\": true,\n      \"cogs\": true\n    };\n    var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (/[\\d\\.]/.test(ch)) {\n        if (ch == \".\") {\n          stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n        } else if (ch == \"0\") {\n          stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n        } else {\n          stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n        }\n        return \"number\";\n      }\n      if (ch == \"/\" || ch == \"(\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current().toLowerCase();\n      if (keywords.propertyIsEnumerable(cur) || start_blocks.propertyIsEnumerable(cur) || end_blocks.propertyIsEnumerable(cur)) {\n        return \"keyword\";\n      }\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"variable\";\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      return state.context = new Context(state.indented, col, type, null, state.context);\n    }\n    function popContext(state) {\n      if (!state.context.prev) return;\n      var t = state.context.type;\n      if (t == \"end_block\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    // Interface\n\n    return {\n      startState: function (basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function (stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        var cur = stream.current().toLowerCase();\n        if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");else if (end_blocks.propertyIsEnumerable(cur)) popContext(state);\n        state.startOfLine = false;\n        return style;\n      },\n      indent: function (state, textAfter) {\n        if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n        var ctx = state.context;\n        var closing = end_blocks.propertyIsEnumerable(textAfter);\n        if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : indentUnit);\n      },\n      electricChars: \"ryk\",\n      fold: \"brace\",\n      blockCommentStart: \"(*\",\n      blockCommentEnd: \"*)\",\n      lineComment: \"//\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-fcl\", \"fcl\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","keywords","start_blocks","end_blocks","atoms","isOperatorChar","tokenBase","stream","state","ch","next","test","match","eat","tokenize","tokenComment","skipToEnd","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","closing","electricChars","fold","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/fcl/fcl.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"fcl\", function(config) {\n  var indentUnit = config.indentUnit;\n\n  var keywords = {\n      \"term\": true,\n      \"method\": true, \"accu\": true,\n      \"rule\": true, \"then\": true, \"is\": true, \"and\": true, \"or\": true,\n      \"if\": true, \"default\": true\n  };\n\n  var start_blocks = {\n      \"var_input\": true,\n      \"var_output\": true,\n      \"fuzzify\": true,\n      \"defuzzify\": true,\n      \"function_block\": true,\n      \"ruleblock\": true\n  };\n\n  var end_blocks = {\n      \"end_ruleblock\": true,\n      \"end_defuzzify\": true,\n      \"end_function_block\": true,\n      \"end_fuzzify\": true,\n      \"end_var\": true\n  };\n\n  var atoms = {\n      \"true\": true, \"false\": true, \"nan\": true,\n      \"real\": true, \"min\": true, \"max\": true, \"cog\": true, \"cogs\": true\n  };\n\n  var isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (/[\\d\\.]/.test(ch)) {\n      if (ch == \".\") {\n        stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n      } else if (ch == \"0\") {\n        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n      } else {\n        stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n      }\n      return \"number\";\n    }\n\n    if (ch == \"/\" || ch == \"(\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n\n    var cur = stream.current().toLowerCase();\n    if (keywords.propertyIsEnumerable(cur) ||\n        start_blocks.propertyIsEnumerable(cur) ||\n        end_blocks.propertyIsEnumerable(cur)) {\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n\n  function popContext(state) {\n    if (!state.context.prev) return;\n    var t = state.context.type;\n    if (t == \"end_block\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n            if (ctx.align == null) ctx.align = false;\n            state.indented = stream.indentation();\n            state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        var cur = stream.current().toLowerCase();\n\n        if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");\n        else if (end_blocks.propertyIsEnumerable(cur))  popContext(state);\n\n        state.startOfLine = false;\n        return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var ctx = state.context;\n\n      var closing = end_blocks.propertyIsEnumerable(textAfter);\n      if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"ryk\",\n    fold: \"brace\",\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\",\n    lineComment: \"//\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-fcl\", \"fcl\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}