{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"velocity\", function () {\n    function parseWords(str) {\n      var obj = {},\n        words = str.split(\" \");\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n      return obj;\n    }\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" + \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" + \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      // start of unparsed string?\n      if (ch == \"'\" && !state.inString && state.inParams) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenString(ch));\n      }\n      // start of parsed string?\n      else if (ch == '\"') {\n        state.lastTokenWasBuiltin = false;\n        if (state.inString) {\n          state.inString = false;\n          return \"string\";\n        } else if (state.inParams) return chain(stream, state, tokenString(ch));\n      }\n      // is it one of the special signs []{}().,;? Separator?\n      else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") {\n          state.inParams = false;\n          state.lastTokenWasBuiltin = true;\n        }\n        return null;\n      }\n      // start of a number value?\n      else if (/\\d/.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      // multi line comment?\n      else if (ch == \"#\" && stream.eat(\"*\")) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenComment);\n      }\n      // unparsed content?\n      else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n        state.lastTokenWasBuiltin = false;\n        return chain(stream, state, tokenUnparsed);\n      }\n      // single line comment?\n      else if (ch == \"#\" && stream.eat(\"#\")) {\n        state.lastTokenWasBuiltin = false;\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      // variable?\n      else if (ch == \"$\") {\n        stream.eat(\"!\");\n        stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n        // is it one of the specials?\n        if (specials && specials.propertyIsEnumerable(stream.current())) {\n          return \"keyword\";\n        } else {\n          state.lastTokenWasBuiltin = true;\n          state.beforeParams = true;\n          return \"builtin\";\n        }\n      }\n      // is it a operator?\n      else if (isOperatorChar.test(ch)) {\n        state.lastTokenWasBuiltin = false;\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      } else {\n        // get the whole word\n        stream.eatWhile(/[\\w\\$_{}@]/);\n        var word = stream.current();\n        // is it one of the listed keywords?\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\";\n        // is it one of the listed functions?\n        if (functions && functions.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == \"(\" && !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n          state.beforeParams = true;\n          state.lastTokenWasBuiltin = false;\n          return \"keyword\";\n        }\n        if (state.inString) {\n          state.lastTokenWasBuiltin = false;\n          return \"string\";\n        }\n        if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == \".\" && state.lastTokenWasBuiltin) return \"builtin\";\n        // default: just a \"word\"\n        state.lastTokenWasBuiltin = false;\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n          if (quote == '\"' && stream.peek() == '$' && !escaped) {\n            state.inString = true;\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    // Interface\n\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false,\n          inString: false,\n          lastTokenWasBuiltin: false\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"#*\",\n      blockCommentEnd: \"*#\",\n      lineComment: \"##\",\n      fold: \"velocity\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","specials","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inString","inParams","lastTokenWasBuiltin","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","propertyIsEnumerable","current","word","peek","toLowerCase","pos","string","charAt","quote","escaped","end","maybeEnd","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/velocity/velocity.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"velocity\", function() {\n    function parseWords(str) {\n        var obj = {}, words = str.split(\" \");\n        for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n        return obj;\n    }\n\n    var keywords = parseWords(\"#end #else #break #stop #[[ #]] \" +\n                              \"#{end} #{else} #{break} #{stop}\");\n    var functions = parseWords(\"#if #elseif #foreach #set #include #parse #macro #define #evaluate \" +\n                               \"#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}\");\n    var specials = parseWords(\"$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent\");\n    var isOperatorChar = /[+\\-*&%=<>!?:\\/|]/;\n\n    function chain(stream, state, f) {\n        state.tokenize = f;\n        return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n        var beforeParams = state.beforeParams;\n        state.beforeParams = false;\n        var ch = stream.next();\n        // start of unparsed string?\n        if ((ch == \"'\") && !state.inString && state.inParams) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenString(ch));\n        }\n        // start of parsed string?\n        else if ((ch == '\"')) {\n            state.lastTokenWasBuiltin = false;\n            if (state.inString) {\n                state.inString = false;\n                return \"string\";\n            }\n            else if (state.inParams)\n                return chain(stream, state, tokenString(ch));\n        }\n        // is it one of the special signs []{}().,;? Separator?\n        else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n            if (ch == \"(\" && beforeParams)\n                state.inParams = true;\n            else if (ch == \")\") {\n                state.inParams = false;\n                state.lastTokenWasBuiltin = true;\n            }\n            return null;\n        }\n        // start of a number value?\n        else if (/\\d/.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(/[\\w\\.]/);\n            return \"number\";\n        }\n        // multi line comment?\n        else if (ch == \"#\" && stream.eat(\"*\")) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenComment);\n        }\n        // unparsed content?\n        else if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) {\n            state.lastTokenWasBuiltin = false;\n            return chain(stream, state, tokenUnparsed);\n        }\n        // single line comment?\n        else if (ch == \"#\" && stream.eat(\"#\")) {\n            state.lastTokenWasBuiltin = false;\n            stream.skipToEnd();\n            return \"comment\";\n        }\n        // variable?\n        else if (ch == \"$\") {\n            stream.eat(\"!\");\n            stream.eatWhile(/[\\w\\d\\$_\\.{}-]/);\n            // is it one of the specials?\n            if (specials && specials.propertyIsEnumerable(stream.current())) {\n                return \"keyword\";\n            }\n            else {\n                state.lastTokenWasBuiltin = true;\n                state.beforeParams = true;\n                return \"builtin\";\n            }\n        }\n        // is it a operator?\n        else if (isOperatorChar.test(ch)) {\n            state.lastTokenWasBuiltin = false;\n            stream.eatWhile(isOperatorChar);\n            return \"operator\";\n        }\n        else {\n            // get the whole word\n            stream.eatWhile(/[\\w\\$_{}@]/);\n            var word = stream.current();\n            // is it one of the listed keywords?\n            if (keywords && keywords.propertyIsEnumerable(word))\n                return \"keyword\";\n            // is it one of the listed functions?\n            if (functions && functions.propertyIsEnumerable(word) ||\n                    (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()==\"(\") &&\n                     !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {\n                state.beforeParams = true;\n                state.lastTokenWasBuiltin = false;\n                return \"keyword\";\n            }\n            if (state.inString) {\n                state.lastTokenWasBuiltin = false;\n                return \"string\";\n            }\n            if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)==\".\" && state.lastTokenWasBuiltin)\n                return \"builtin\";\n            // default: just a \"word\"\n            state.lastTokenWasBuiltin = false;\n            return null;\n        }\n    }\n\n    function tokenString(quote) {\n        return function(stream, state) {\n            var escaped = false, next, end = false;\n            while ((next = stream.next()) != null) {\n                if ((next == quote) && !escaped) {\n                    end = true;\n                    break;\n                }\n                if (quote=='\"' && stream.peek() == '$' && !escaped) {\n                    state.inString = true;\n                    end = true;\n                    break;\n                }\n                escaped = !escaped && next == \"\\\\\";\n            }\n            if (end) state.tokenize = tokenBase;\n            return \"string\";\n        };\n    }\n\n    function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            maybeEnd = (ch == \"*\");\n        }\n        return \"comment\";\n    }\n\n    function tokenUnparsed(stream, state) {\n        var maybeEnd = 0, ch;\n        while (ch = stream.next()) {\n            if (ch == \"#\" && maybeEnd == 2) {\n                state.tokenize = tokenBase;\n                break;\n            }\n            if (ch == \"]\")\n                maybeEnd++;\n            else if (ch != \" \")\n                maybeEnd = 0;\n        }\n        return \"meta\";\n    }\n    // Interface\n\n    return {\n        startState: function() {\n            return {\n                tokenize: tokenBase,\n                beforeParams: false,\n                inParams: false,\n                inString: false,\n                lastTokenWasBuiltin: false\n            };\n        },\n\n        token: function(stream, state) {\n            if (stream.eatSpace()) return null;\n            return state.tokenize(stream, state);\n        },\n        blockCommentStart: \"#*\",\n        blockCommentEnd: \"*#\",\n        lineComment: \"##\",\n        fold: \"velocity\"\n    };\n});\n\nCodeMirror.defineMIME(\"text/velocity\", \"velocity\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}