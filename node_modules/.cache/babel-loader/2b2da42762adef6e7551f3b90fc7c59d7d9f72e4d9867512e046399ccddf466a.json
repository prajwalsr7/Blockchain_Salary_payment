{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"solr\", function () {\n    \"use strict\";\n\n    var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\n    var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n    var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n    function isNumber(word) {\n      return parseFloat(word).toString() === word;\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) break;\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (!escaped) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenOperator(operator) {\n      return function (stream, state) {\n        var style = \"operator\";\n        if (operator == \"+\") style += \" positive\";else if (operator == \"-\") style += \" negative\";else if (operator == \"|\") stream.eat(/\\|/);else if (operator == \"&\") stream.eat(/\\&/);else if (operator == \"^\") style += \" boost\";\n        state.tokenize = tokenBase;\n        return style;\n      };\n    }\n    function tokenWord(ch) {\n      return function (stream, state) {\n        var word = ch;\n        while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n          word += stream.next();\n        }\n        state.tokenize = tokenBase;\n        if (isOperatorString.test(word)) return \"operator\";else if (isNumber(word)) return \"number\";else if (stream.peek() == \":\") return \"field\";else return \"string\";\n      };\n    }\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"') state.tokenize = tokenString(ch);else if (isOperatorChar.test(ch)) state.tokenize = tokenOperator(ch);else if (isStringChar.test(ch)) state.tokenize = tokenWord(ch);\n      return state.tokenize != tokenBase ? state.tokenize(stream, state) : null;\n    }\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","isStringChar","isOperatorChar","isOperatorString","isNumber","word","parseFloat","toString","tokenString","quote","stream","state","escaped","next","tokenize","tokenBase","tokenOperator","operator","style","eat","tokenWord","ch","peek","match","test","startState","token","eatSpace","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/solr/solr.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"solr\", function() {\n  \"use strict\";\n\n  var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\n  var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n  var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\n  function isNumber(word) {\n    return parseFloat(word).toString() === word;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenOperator(operator) {\n    return function(stream, state) {\n      var style = \"operator\";\n      if (operator == \"+\")\n        style += \" positive\";\n      else if (operator == \"-\")\n        style += \" negative\";\n      else if (operator == \"|\")\n        stream.eat(/\\|/);\n      else if (operator == \"&\")\n        stream.eat(/\\&/);\n      else if (operator == \"^\")\n        style += \" boost\";\n\n      state.tokenize = tokenBase;\n      return style;\n    };\n  }\n\n  function tokenWord(ch) {\n    return function(stream, state) {\n      var word = ch;\n      while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n        word += stream.next();\n      }\n\n      state.tokenize = tokenBase;\n      if (isOperatorString.test(word))\n        return \"operator\";\n      else if (isNumber(word))\n        return \"number\";\n      else if (stream.peek() == \":\")\n        return \"field\";\n      else\n        return \"string\";\n    };\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"')\n      state.tokenize = tokenString(ch);\n    else if (isOperatorChar.test(ch))\n      state.tokenize = tokenOperator(ch);\n    else if (isStringChar.test(ch))\n      state.tokenize = tokenWord(ch);\n\n    return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}