{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/multiplex\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function () {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n      operator = /^[+\\-*&%=<>!?|~^]/,\n      sign = /^[:\\[\\(\\{]/,\n      atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n      number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n    function tokenBase(stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n        //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n          //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    }\n    ;\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMode(\"twig\", function (config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(CodeMirror.getMode(config, parserConfig.base), {\n      open: /\\{[{#%]/,\n      close: /[}#%]\\}/,\n      mode: twigInner,\n      parseDelimiters: true\n    });\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","operator","sign","atom","number","RegExp","join","tokenBase","stream","state","ch","peek","incomment","skipTo","skipToEnd","eatWhile","intag","match","instring","next","eat","sol","startState","token","config","parserConfig","twigInner","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/twig/twig.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"),  require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function() {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"twig\", function(config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base), {\n        open: /\\{[{#%]/, close: /[}#%]\\}/, mode: twigInner, parseDelimiters: true\n      }\n    );\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}