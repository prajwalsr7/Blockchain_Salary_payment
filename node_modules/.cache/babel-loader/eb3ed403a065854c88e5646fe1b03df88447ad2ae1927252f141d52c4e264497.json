{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Brainfuck mode created by Michael Kaminsky https://github.com/mkaminsky11\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) define([\"../../lib/codemirror\"], mod);else mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var reserve = \"><+-.,[]\".split(\"\");\n  /*\n  comments can be either:\n  placed behind lines\n         +++    this is a comment\n   where reserved characters cannot be used\n  or in a loop\n  [\n    this is ok to use [ ] and stuff\n  ]\n  or preceded by #\n  */\n  CodeMirror.defineMode(\"brainfuck\", function () {\n    return {\n      startState: function () {\n        return {\n          commentLine: false,\n          left: 0,\n          right: 0,\n          commentLoop: false\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        if (stream.sol()) {\n          state.commentLine = false;\n        }\n        var ch = stream.next().toString();\n        if (reserve.indexOf(ch) !== -1) {\n          if (state.commentLine === true) {\n            if (stream.eol()) {\n              state.commentLine = false;\n            }\n            return \"comment\";\n          }\n          if (ch === \"]\" || ch === \"[\") {\n            if (ch === \"[\") {\n              state.left++;\n            } else {\n              state.right++;\n            }\n            return \"bracket\";\n          } else if (ch === \"+\" || ch === \"-\") {\n            return \"keyword\";\n          } else if (ch === \"<\" || ch === \">\") {\n            return \"atom\";\n          } else if (ch === \".\" || ch === \",\") {\n            return \"def\";\n          }\n        } else {\n          state.commentLine = true;\n          if (stream.eol()) {\n            state.commentLine = false;\n          }\n          return \"comment\";\n        }\n        if (stream.eol()) {\n          state.commentLine = false;\n        }\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-brainfuck\", \"brainfuck\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","reserve","split","defineMode","startState","commentLine","left","right","commentLoop","token","stream","state","eatSpace","sol","ch","next","toString","indexOf","eol","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/brainfuck/brainfuck.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Brainfuck mode created by Michael Kaminsky https://github.com/mkaminsky11\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod)\n  else\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var reserve = \"><+-.,[]\".split(\"\");\n  /*\n  comments can be either:\n  placed behind lines\n\n        +++    this is a comment\n\n  where reserved characters cannot be used\n  or in a loop\n  [\n    this is ok to use [ ] and stuff\n  ]\n  or preceded by #\n  */\n  CodeMirror.defineMode(\"brainfuck\", function() {\n    return {\n      startState: function() {\n        return {\n          commentLine: false,\n          left: 0,\n          right: 0,\n          commentLoop: false\n        }\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null\n        if(stream.sol()){\n          state.commentLine = false;\n        }\n        var ch = stream.next().toString();\n        if(reserve.indexOf(ch) !== -1){\n          if(state.commentLine === true){\n            if(stream.eol()){\n              state.commentLine = false;\n            }\n            return \"comment\";\n          }\n          if(ch === \"]\" || ch === \"[\"){\n            if(ch === \"[\"){\n              state.left++;\n            }\n            else{\n              state.right++;\n            }\n            return \"bracket\";\n          }\n          else if(ch === \"+\" || ch === \"-\"){\n            return \"keyword\";\n          }\n          else if(ch === \"<\" || ch === \">\"){\n            return \"atom\";\n          }\n          else if(ch === \".\" || ch === \",\"){\n            return \"def\";\n          }\n        }\n        else{\n          state.commentLine = true;\n          if(stream.eol()){\n            state.commentLine = false;\n          }\n          return \"comment\";\n        }\n        if(stream.eol()){\n          state.commentLine = false;\n        }\n      }\n    };\n  });\nCodeMirror.defineMIME(\"text/x-brainfuck\",\"brainfuck\")\n});\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA,CAAC,UAASA,GAAG,EAAE;EACb,IAAI,OAAOC,OAAO,IAAI,QAAQ,IAAI,OAAOC,MAAM,IAAI,QAAQ,EACzDF,GAAG,CAACG,OAAO,CAAC,sBAAsB,CAAC,CAAC,MACjC,IAAI,OAAOC,MAAM,IAAI,UAAU,IAAIA,MAAM,CAACC,GAAG,EAChDD,MAAM,CAAC,CAAC,sBAAsB,CAAC,EAAEJ,GAAG,CAAC,MAErCA,GAAG,CAACM,UAAU,CAAC;AACnB,CAAC,EAAE,UAASA,UAAU,EAAE;EACtB,YAAY;;EACZ,IAAIC,OAAO,GAAG,UAAU,CAACC,KAAK,CAAC,EAAE,CAAC;EAClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGEF,UAAU,CAACG,UAAU,CAAC,WAAW,EAAE,YAAW;IAC5C,OAAO;MACLC,UAAU,EAAE,SAAAA,CAAA,EAAW;QACrB,OAAO;UACLC,WAAW,EAAE,KAAK;UAClBC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,CAAC;UACRC,WAAW,EAAE;QACf,CAAC;MACH,CAAC;MACDC,KAAK,EAAE,SAAAA,CAASC,MAAM,EAAEC,KAAK,EAAE;QAC7B,IAAID,MAAM,CAACE,QAAQ,CAAC,CAAC,EAAE,OAAO,IAAI;QAClC,IAAGF,MAAM,CAACG,GAAG,CAAC,CAAC,EAAC;UACdF,KAAK,CAACN,WAAW,GAAG,KAAK;QAC3B;QACA,IAAIS,EAAE,GAAGJ,MAAM,CAACK,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACjC,IAAGf,OAAO,CAACgB,OAAO,CAACH,EAAE,CAAC,KAAK,CAAC,CAAC,EAAC;UAC5B,IAAGH,KAAK,CAACN,WAAW,KAAK,IAAI,EAAC;YAC5B,IAAGK,MAAM,CAACQ,GAAG,CAAC,CAAC,EAAC;cACdP,KAAK,CAACN,WAAW,GAAG,KAAK;YAC3B;YACA,OAAO,SAAS;UAClB;UACA,IAAGS,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG,EAAC;YAC1B,IAAGA,EAAE,KAAK,GAAG,EAAC;cACZH,KAAK,CAACL,IAAI,EAAE;YACd,CAAC,MACG;cACFK,KAAK,CAACJ,KAAK,EAAE;YACf;YACA,OAAO,SAAS;UAClB,CAAC,MACI,IAAGO,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG,EAAC;YAC/B,OAAO,SAAS;UAClB,CAAC,MACI,IAAGA,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG,EAAC;YAC/B,OAAO,MAAM;UACf,CAAC,MACI,IAAGA,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG,EAAC;YAC/B,OAAO,KAAK;UACd;QACF,CAAC,MACG;UACFH,KAAK,CAACN,WAAW,GAAG,IAAI;UACxB,IAAGK,MAAM,CAACQ,GAAG,CAAC,CAAC,EAAC;YACdP,KAAK,CAACN,WAAW,GAAG,KAAK;UAC3B;UACA,OAAO,SAAS;QAClB;QACA,IAAGK,MAAM,CAACQ,GAAG,CAAC,CAAC,EAAC;UACdP,KAAK,CAACN,WAAW,GAAG,KAAK;QAC3B;MACF;IACF,CAAC;EACH,CAAC,CAAC;EACJL,UAAU,CAACmB,UAAU,CAAC,kBAAkB,EAAC,WAAW,CAAC;AACrD,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}