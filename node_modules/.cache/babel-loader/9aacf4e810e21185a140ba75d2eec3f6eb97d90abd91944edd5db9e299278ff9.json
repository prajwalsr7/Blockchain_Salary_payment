{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"haskell\", function (_config, modeConfig) {\n    function switchState(source, setState, f) {\n      setState(f);\n      return f(source, setState);\n    }\n\n    // These should all be Unicode extended, as per the Haskell 2010 report\n    var smallRE = /[a-z_]/;\n    var largeRE = /[A-Z]/;\n    var digitRE = /\\d/;\n    var hexitRE = /[0-9A-Fa-f]/;\n    var octitRE = /[0-7]/;\n    var idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\n    var symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\n    var specialRE = /[(),;[\\]`{}]/;\n    var whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\n    function normal(source, setState) {\n      if (source.eatWhile(whiteCharRE)) {\n        return null;\n      }\n      var ch = source.next();\n      if (specialRE.test(ch)) {\n        if (ch == '{' && source.eat('-')) {\n          var t = \"comment\";\n          if (source.eat('#')) {\n            t = \"meta\";\n          }\n          return switchState(source, setState, ncomment(t, 1));\n        }\n        return null;\n      }\n      if (ch == '\\'') {\n        if (source.eat('\\\\')) {\n          source.next(); // should handle other escapes here\n        } else {\n          source.next();\n        }\n        if (source.eat('\\'')) {\n          return \"string\";\n        }\n        return \"string error\";\n      }\n      if (ch == '\"') {\n        return switchState(source, setState, stringLiteral);\n      }\n      if (largeRE.test(ch)) {\n        source.eatWhile(idRE);\n        if (source.eat('.')) {\n          return \"qualifier\";\n        }\n        return \"variable-2\";\n      }\n      if (smallRE.test(ch)) {\n        source.eatWhile(idRE);\n        return \"variable\";\n      }\n      if (digitRE.test(ch)) {\n        if (ch == '0') {\n          if (source.eat(/[xX]/)) {\n            source.eatWhile(hexitRE); // should require at least 1\n            return \"integer\";\n          }\n          if (source.eat(/[oO]/)) {\n            source.eatWhile(octitRE); // should require at least 1\n            return \"number\";\n          }\n        }\n        source.eatWhile(digitRE);\n        var t = \"number\";\n        if (source.match(/^\\.\\d+/)) {\n          t = \"number\";\n        }\n        if (source.eat(/[eE]/)) {\n          t = \"number\";\n          source.eat(/[-+]/);\n          source.eatWhile(digitRE); // should require at least 1\n        }\n        return t;\n      }\n      if (ch == \".\" && source.eat(\".\")) return \"keyword\";\n      if (symbolRE.test(ch)) {\n        if (ch == '-' && source.eat(/-/)) {\n          source.eatWhile(/-/);\n          if (!source.eat(symbolRE)) {\n            source.skipToEnd();\n            return \"comment\";\n          }\n        }\n        var t = \"variable\";\n        if (ch == ':') {\n          t = \"variable-2\";\n        }\n        source.eatWhile(symbolRE);\n        return t;\n      }\n      return \"error\";\n    }\n    function ncomment(type, nest) {\n      if (nest == 0) {\n        return normal;\n      }\n      return function (source, setState) {\n        var currNest = nest;\n        while (!source.eol()) {\n          var ch = source.next();\n          if (ch == '{' && source.eat('-')) {\n            ++currNest;\n          } else if (ch == '-' && source.eat('}')) {\n            --currNest;\n            if (currNest == 0) {\n              setState(normal);\n              return type;\n            }\n          }\n        }\n        setState(ncomment(type, currNest));\n        return type;\n      };\n    }\n    function stringLiteral(source, setState) {\n      while (!source.eol()) {\n        var ch = source.next();\n        if (ch == '\"') {\n          setState(normal);\n          return \"string\";\n        }\n        if (ch == '\\\\') {\n          if (source.eol() || source.eat(whiteCharRE)) {\n            setState(stringGap);\n            return \"string\";\n          }\n          if (source.eat('&')) {} else {\n            source.next(); // should handle other escapes here\n          }\n        }\n      }\n      setState(normal);\n      return \"string error\";\n    }\n    function stringGap(source, setState) {\n      if (source.eat('\\\\')) {\n        return switchState(source, setState, stringLiteral);\n      }\n      source.next();\n      setState(normal);\n      return \"error\";\n    }\n    var wellKnownWords = function () {\n      var wkw = {};\n      function setType(t) {\n        return function () {\n          for (var i = 0; i < arguments.length; i++) wkw[arguments[i]] = t;\n        };\n      }\n      setType(\"keyword\")(\"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\", \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\", \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n      setType(\"keyword\")(\"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n      setType(\"builtin\")(\"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\", \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\", \"*>\", \"**\");\n      setType(\"builtin\")(\"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\", \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\", \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\", \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\", \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\", \"String\", \"True\");\n      setType(\"builtin\")(\"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\", \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\", \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\", \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\", \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\", \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\", \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\", \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\", \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\", \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\", \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\", \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\", \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\", \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\", \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\", \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\", \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\", \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\", \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\", \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\", \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\", \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\", \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\", \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\", \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\", \"zip3\", \"zipWith\", \"zipWith3\");\n      var override = modeConfig.overrideKeywords;\n      if (override) for (var word in override) if (override.hasOwnProperty(word)) wkw[word] = override[word];\n      return wkw;\n    }();\n    return {\n      startState: function () {\n        return {\n          f: normal\n        };\n      },\n      copyState: function (s) {\n        return {\n          f: s.f\n        };\n      },\n      token: function (stream, state) {\n        var t = state.f(stream, function (s) {\n          state.f = s;\n        });\n        var w = stream.current();\n        return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n      },\n      blockCommentStart: \"{-\",\n      blockCommentEnd: \"-}\",\n      lineComment: \"--\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-haskell\", \"haskell\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","modeConfig","switchState","source","setState","f","smallRE","largeRE","digitRE","hexitRE","octitRE","idRE","symbolRE","specialRE","whiteCharRE","normal","eatWhile","ch","next","test","eat","t","ncomment","stringLiteral","match","skipToEnd","type","nest","currNest","eol","stringGap","wellKnownWords","wkw","setType","i","arguments","length","override","overrideKeywords","word","hasOwnProperty","startState","copyState","s","token","stream","state","w","current","blockCommentStart","blockCommentEnd","lineComment","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/haskell/haskell.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"haskell\", function(_config, modeConfig) {\n\n  function switchState(source, setState, f) {\n    setState(f);\n    return f(source, setState);\n  }\n\n  // These should all be Unicode extended, as per the Haskell 2010 report\n  var smallRE = /[a-z_]/;\n  var largeRE = /[A-Z]/;\n  var digitRE = /\\d/;\n  var hexitRE = /[0-9A-Fa-f]/;\n  var octitRE = /[0-7]/;\n  var idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\n  var symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\n  var specialRE = /[(),;[\\]`{}]/;\n  var whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\n  function normal(source, setState) {\n    if (source.eatWhile(whiteCharRE)) {\n      return null;\n    }\n\n    var ch = source.next();\n    if (specialRE.test(ch)) {\n      if (ch == '{' && source.eat('-')) {\n        var t = \"comment\";\n        if (source.eat('#')) {\n          t = \"meta\";\n        }\n        return switchState(source, setState, ncomment(t, 1));\n      }\n      return null;\n    }\n\n    if (ch == '\\'') {\n      if (source.eat('\\\\')) {\n        source.next();  // should handle other escapes here\n      }\n      else {\n        source.next();\n      }\n      if (source.eat('\\'')) {\n        return \"string\";\n      }\n      return \"string error\";\n    }\n\n    if (ch == '\"') {\n      return switchState(source, setState, stringLiteral);\n    }\n\n    if (largeRE.test(ch)) {\n      source.eatWhile(idRE);\n      if (source.eat('.')) {\n        return \"qualifier\";\n      }\n      return \"variable-2\";\n    }\n\n    if (smallRE.test(ch)) {\n      source.eatWhile(idRE);\n      return \"variable\";\n    }\n\n    if (digitRE.test(ch)) {\n      if (ch == '0') {\n        if (source.eat(/[xX]/)) {\n          source.eatWhile(hexitRE); // should require at least 1\n          return \"integer\";\n        }\n        if (source.eat(/[oO]/)) {\n          source.eatWhile(octitRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      source.eatWhile(digitRE);\n      var t = \"number\";\n      if (source.match(/^\\.\\d+/)) {\n        t = \"number\";\n      }\n      if (source.eat(/[eE]/)) {\n        t = \"number\";\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return t;\n    }\n\n    if (ch == \".\" && source.eat(\".\"))\n      return \"keyword\";\n\n    if (symbolRE.test(ch)) {\n      if (ch == '-' && source.eat(/-/)) {\n        source.eatWhile(/-/);\n        if (!source.eat(symbolRE)) {\n          source.skipToEnd();\n          return \"comment\";\n        }\n      }\n      var t = \"variable\";\n      if (ch == ':') {\n        t = \"variable-2\";\n      }\n      source.eatWhile(symbolRE);\n      return t;\n    }\n\n    return \"error\";\n  }\n\n  function ncomment(type, nest) {\n    if (nest == 0) {\n      return normal;\n    }\n    return function(source, setState) {\n      var currNest = nest;\n      while (!source.eol()) {\n        var ch = source.next();\n        if (ch == '{' && source.eat('-')) {\n          ++currNest;\n        }\n        else if (ch == '-' && source.eat('}')) {\n          --currNest;\n          if (currNest == 0) {\n            setState(normal);\n            return type;\n          }\n        }\n      }\n      setState(ncomment(type, currNest));\n      return type;\n    };\n  }\n\n  function stringLiteral(source, setState) {\n    while (!source.eol()) {\n      var ch = source.next();\n      if (ch == '\"') {\n        setState(normal);\n        return \"string\";\n      }\n      if (ch == '\\\\') {\n        if (source.eol() || source.eat(whiteCharRE)) {\n          setState(stringGap);\n          return \"string\";\n        }\n        if (source.eat('&')) {\n        }\n        else {\n          source.next(); // should handle other escapes here\n        }\n      }\n    }\n    setState(normal);\n    return \"string error\";\n  }\n\n  function stringGap(source, setState) {\n    if (source.eat('\\\\')) {\n      return switchState(source, setState, stringLiteral);\n    }\n    source.next();\n    setState(normal);\n    return \"error\";\n  }\n\n\n  var wellKnownWords = (function() {\n    var wkw = {};\n    function setType(t) {\n      return function () {\n        for (var i = 0; i < arguments.length; i++)\n          wkw[arguments[i]] = t;\n      };\n    }\n\n    setType(\"keyword\")(\n      \"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\",\n      \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\",\n      \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n\n    setType(\"keyword\")(\n      \"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n\n    setType(\"builtin\")(\n      \"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\",\n      \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\",\n      \"*>\", \"**\");\n\n    setType(\"builtin\")(\n      \"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\",\n      \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\",\n      \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\",\n      \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\",\n      \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\",\n      \"String\", \"True\");\n\n    setType(\"builtin\")(\n      \"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\",\n      \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\",\n      \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\",\n      \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\",\n      \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\",\n      \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\",\n      \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\",\n      \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\",\n      \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\",\n      \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\",\n      \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\",\n      \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\",\n      \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\",\n      \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\",\n      \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\",\n      \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\",\n      \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\",\n      \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\",\n      \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\",\n      \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\",\n      \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\",\n      \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\",\n      \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\",\n      \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\",\n      \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\",\n      \"zip3\", \"zipWith\", \"zipWith3\");\n\n    var override = modeConfig.overrideKeywords;\n    if (override) for (var word in override) if (override.hasOwnProperty(word))\n      wkw[word] = override[word];\n\n    return wkw;\n  })();\n\n\n\n  return {\n    startState: function ()  { return { f: normal }; },\n    copyState:  function (s) { return { f: s.f }; },\n\n    token: function(stream, state) {\n      var t = state.f(stream, function(s) { state.f = s; });\n      var w = stream.current();\n      return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n    },\n\n    blockCommentStart: \"{-\",\n    blockCommentEnd: \"-}\",\n    lineComment: \"--\"\n  };\n\n});\n\nCodeMirror.defineMIME(\"text/x-haskell\", \"haskell\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}