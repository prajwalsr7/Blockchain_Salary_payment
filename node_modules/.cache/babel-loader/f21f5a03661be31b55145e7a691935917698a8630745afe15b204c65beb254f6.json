{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"commonlisp\", function (config) {\n    var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\n    var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\n    var numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\n    var symbol = /[^\\s'`,@()\\[\\]\";]/;\n    var type;\n    function readSym(stream) {\n      var ch;\n      while (ch = stream.next()) {\n        if (ch == \"\\\\\") stream.next();else if (!symbol.test(ch)) {\n          stream.backUp(1);\n          break;\n        }\n      }\n      return stream.current();\n    }\n    function base(stream, state) {\n      if (stream.eatSpace()) {\n        type = \"ws\";\n        return null;\n      }\n      if (stream.match(numLiteral)) return \"number\";\n      var ch = stream.next();\n      if (ch == \"\\\\\") ch = stream.next();\n      if (ch == '\"') return (state.tokenize = inString)(stream, state);else if (ch == \"(\") {\n        type = \"open\";\n        return \"bracket\";\n      } else if (ch == \")\" || ch == \"]\") {\n        type = \"close\";\n        return \"bracket\";\n      } else if (ch == \";\") {\n        stream.skipToEnd();\n        type = \"ws\";\n        return \"comment\";\n      } else if (/['`,@]/.test(ch)) return null;else if (ch == \"|\") {\n        if (stream.skipTo(\"|\")) {\n          stream.next();\n          return \"symbol\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      } else if (ch == \"#\") {\n        var ch = stream.next();\n        if (ch == \"(\") {\n          type = \"open\";\n          return \"bracket\";\n        } else if (/[+\\-=\\.']/.test(ch)) return null;else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);else if (ch == \":\") {\n          readSym(stream);\n          return \"meta\";\n        } else if (ch == \"\\\\\") {\n          stream.next();\n          readSym(stream);\n          return \"string-2\";\n        } else return \"error\";\n      } else {\n        var name = readSym(stream);\n        if (name == \".\") return null;\n        type = \"symbol\";\n        if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n        if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n        if (name.charAt(0) == \"&\") return \"variable-2\";\n        return \"variable\";\n      }\n    }\n    function inString(stream, state) {\n      var escaped = false,\n        next;\n      while (next = stream.next()) {\n        if (next == '\"' && !escaped) {\n          state.tokenize = base;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      return \"string\";\n    }\n    function inComment(stream, state) {\n      var next, last;\n      while (next = stream.next()) {\n        if (next == \"#\" && last == \"|\") {\n          state.tokenize = base;\n          break;\n        }\n        last = next;\n      }\n      type = \"ws\";\n      return \"comment\";\n    }\n    return {\n      startState: function () {\n        return {\n          ctx: {\n            prev: null,\n            start: 0,\n            indentTo: 0\n          },\n          lastType: null,\n          tokenize: base\n        };\n      },\n      token: function (stream, state) {\n        if (stream.sol() && typeof state.ctx.indentTo != \"number\") state.ctx.indentTo = state.ctx.start + 1;\n        type = null;\n        var style = state.tokenize(stream, state);\n        if (type != \"ws\") {\n          if (state.ctx.indentTo == null) {\n            if (type == \"symbol\" && assumeBody.test(stream.current())) state.ctx.indentTo = state.ctx.start + config.indentUnit;else state.ctx.indentTo = \"next\";\n          } else if (state.ctx.indentTo == \"next\") {\n            state.ctx.indentTo = stream.column();\n          }\n          state.lastType = type;\n        }\n        if (type == \"open\") state.ctx = {\n          prev: state.ctx,\n          start: stream.column(),\n          indentTo: null\n        };else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n        return style;\n      },\n      indent: function (state, _textAfter) {\n        var i = state.ctx.indentTo;\n        return typeof i == \"number\" ? i : state.ctx.start + 1;\n      },\n      closeBrackets: {\n        pairs: \"()[]{}\\\"\\\"\"\n      },\n      lineComment: \";;\",\n      blockCommentStart: \"#|\",\n      blockCommentEnd: \"|#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-common-lisp\", \"commonlisp\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","specialForm","assumeBody","numLiteral","symbol","type","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","_textAfter","i","closeBrackets","pairs","lineComment","blockCommentStart","blockCommentEnd","defineMIME"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/commonlisp/commonlisp.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"commonlisp\", function (config) {\n  var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\n  var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\n  var numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\n  var symbol = /[^\\s'`,@()\\[\\]\";]/;\n  var type;\n\n  function readSym(stream) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"\\\\\") stream.next();\n      else if (!symbol.test(ch)) { stream.backUp(1); break; }\n    }\n    return stream.current();\n  }\n\n  function base(stream, state) {\n    if (stream.eatSpace()) {type = \"ws\"; return null;}\n    if (stream.match(numLiteral)) return \"number\";\n    var ch = stream.next();\n    if (ch == \"\\\\\") ch = stream.next();\n\n    if (ch == '\"') return (state.tokenize = inString)(stream, state);\n    else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (ch == \")\" || ch == \"]\") { type = \"close\"; return \"bracket\"; }\n    else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n    else if (/['`,@]/.test(ch)) return null;\n    else if (ch == \"|\") {\n      if (stream.skipTo(\"|\")) { stream.next(); return \"symbol\"; }\n      else { stream.skipToEnd(); return \"error\"; }\n    } else if (ch == \"#\") {\n      var ch = stream.next();\n      if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n      else if (/[+\\-=\\.']/.test(ch)) return null;\n      else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n      else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n      else if (ch == \":\") { readSym(stream); return \"meta\"; }\n      else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string-2\" }\n      else return \"error\";\n    } else {\n      var name = readSym(stream);\n      if (name == \".\") return null;\n      type = \"symbol\";\n      if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n      if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n      if (name.charAt(0) == \"&\") return \"variable-2\";\n      return \"variable\";\n    }\n  }\n\n  function inString(stream, state) {\n    var escaped = false, next;\n    while (next = stream.next()) {\n      if (next == '\"' && !escaped) { state.tokenize = base; break; }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return \"string\";\n  }\n\n  function inComment(stream, state) {\n    var next, last;\n    while (next = stream.next()) {\n      if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n      last = next;\n    }\n    type = \"ws\";\n    return \"comment\";\n  }\n\n  return {\n    startState: function () {\n      return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n    },\n\n    token: function (stream, state) {\n      if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n        state.ctx.indentTo = state.ctx.start + 1;\n\n      type = null;\n      var style = state.tokenize(stream, state);\n      if (type != \"ws\") {\n        if (state.ctx.indentTo == null) {\n          if (type == \"symbol\" && assumeBody.test(stream.current()))\n            state.ctx.indentTo = state.ctx.start + config.indentUnit;\n          else\n            state.ctx.indentTo = \"next\";\n        } else if (state.ctx.indentTo == \"next\") {\n          state.ctx.indentTo = stream.column();\n        }\n        state.lastType = type;\n      }\n      if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n      else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n      return style;\n    },\n\n    indent: function (state, _textAfter) {\n      var i = state.ctx.indentTo;\n      return typeof i == \"number\" ? i : state.ctx.start + 1;\n    },\n\n    closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n    lineComment: \";;\",\n    blockCommentStart: \"#|\",\n    blockCommentEnd: \"|#\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-common-lisp\", \"commonlisp\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}