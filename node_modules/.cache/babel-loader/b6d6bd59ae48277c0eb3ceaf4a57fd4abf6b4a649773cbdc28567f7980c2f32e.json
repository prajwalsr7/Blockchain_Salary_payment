{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"asn.1\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n      keywords = parserConfig.keywords || {},\n      cmipVerbs = parserConfig.cmipVerbs || {},\n      compareTypes = parserConfig.compareTypes || {},\n      status = parserConfig.status || {},\n      tags = parserConfig.tags || {},\n      storage = parserConfig.storage || {},\n      modifier = parserConfig.modifier || {},\n      accessTypes = parserConfig.accessTypes || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|\\^]/;\n    var curPunc;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"-\") {\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\-]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (cmipVerbs.propertyIsEnumerable(cur)) return \"variable cmipVerbs\";\n      if (compareTypes.propertyIsEnumerable(cur)) return \"atom compareTypes\";\n      if (status.propertyIsEnumerable(cur)) return \"comment status\";\n      if (tags.propertyIsEnumerable(cur)) return \"variable-3 tags\";\n      if (storage.propertyIsEnumerable(cur)) return \"builtin storage\";\n      if (modifier.propertyIsEnumerable(cur)) return \"string-2 modifier\";\n      if (accessTypes.propertyIsEnumerable(cur)) return \"atom accessTypes\";\n      return \"variable\";\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext) {\n              afterNext = afterNext.toLowerCase();\n              if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n            }\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function (basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function (stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      lineComment: \"--\",\n      fold: \"brace\"\n    };\n  });\n  function words(str) {\n    var obj = {},\n      words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  CodeMirror.defineMIME(\"text/x-ttcn-asn\", {\n    name: \"asn.1\",\n    keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" + \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" + \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" + \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" + \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" + \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" + \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" + \" IMPLIED EXPORTS\"),\n    cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n    compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" + \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" + \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" + \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" + \" TEXTUAL-CONVENTION\"),\n    status: words(\"current deprecated mandatory obsolete\"),\n    tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" + \" UNIVERSAL\"),\n    storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" + \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" + \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" + \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" + \" TruthValue RowStatus DisplayString GeneralString\" + \" GraphicString IA5String NumericString\" + \" PrintableString SnmpAdminString TeletexString\" + \" UTF8String VideotexString VisibleString StringStore\" + \" ISO646String T61String UniversalString Unsigned32\" + \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n    modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" + \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" + \" DEFINED\"),\n    accessTypes: words(\"not-accessible accessible-for-notify read-only\" + \" read-create read-write\"),\n    multiLineStrings: true\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","words","str","obj","split","i","length","defineMIME","name"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/asn.1/asn.1.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"asn.1\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        cmipVerbs = parserConfig.cmipVerbs || {},\n        compareTypes = parserConfig.compareTypes || {},\n        status = parserConfig.status || {},\n        tags = parserConfig.tags || {},\n        storage = parserConfig.storage || {},\n        modifier = parserConfig.modifier || {},\n        accessTypes = parserConfig.accessTypes|| {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|\\^]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"-\"){\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n\n      stream.eatWhile(/[\\w\\-]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (cmipVerbs.propertyIsEnumerable(cur)) return \"variable cmipVerbs\";\n      if (compareTypes.propertyIsEnumerable(cur)) return \"atom compareTypes\";\n      if (status.propertyIsEnumerable(cur)) return \"comment status\";\n      if (tags.propertyIsEnumerable(cur)) return \"variable-3 tags\";\n      if (storage.propertyIsEnumerable(cur)) return \"builtin storage\";\n      if (modifier.propertyIsEnumerable(cur)) return \"string-2 modifier\";\n      if (accessTypes.propertyIsEnumerable(cur)) return \"atom accessTypes\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext){\n              afterNext = afterNext.toLowerCase();\n              if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n            && curPunc != ';') || (ctx.type == \"statement\"\n            && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n        return style;\n      },\n\n      electricChars: \"{}\",\n      lineComment: \"--\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-asn\", {\n    name: \"asn.1\",\n    keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" +\n    \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" +\n    \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" +\n    \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" +\n    \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" +\n    \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" +\n    \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" +\n    \" IMPLIED EXPORTS\"),\n    cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n    compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" +\n    \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" +\n    \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" +\n    \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" +\n    \" TEXTUAL-CONVENTION\"),\n    status: words(\"current deprecated mandatory obsolete\"),\n    tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" +\n    \" UNIVERSAL\"),\n    storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" +\n    \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" +\n    \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" +\n    \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" +\n    \" TruthValue RowStatus DisplayString GeneralString\" +\n    \" GraphicString IA5String NumericString\" +\n    \" PrintableString SnmpAdminString TeletexString\" +\n    \" UTF8String VideotexString VisibleString StringStore\" +\n    \" ISO646String T61String UniversalString Unsigned32\" +\n    \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n    modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" +\n    \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" +\n    \" DEFINED\"),\n    accessTypes: words(\"not-accessible accessible-for-notify read-only\" +\n    \" read-create read-write\"),\n    multiLineStrings: true\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}