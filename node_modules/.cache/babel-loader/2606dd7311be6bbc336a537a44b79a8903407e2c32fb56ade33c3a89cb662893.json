{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var from = \"from\";\n  var fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n  var shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\n  var shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n  var expose = \"expose\";\n  var exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n  var others = [\"arg\", \"from\", \"maintainer\", \"label\", \"env\", \"add\", \"copy\", \"volume\", \"user\", \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"];\n\n  // Collect all Dockerfile directives\n  var instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = \"(\" + instructions.join('|') + \")\",\n    instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n    instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n  CodeMirror.defineSimpleMode(\"dockerfile\", {\n    start: [\n    // Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    }, {\n      regex: fromRegex,\n      token: [null, \"keyword\"],\n      sol: true,\n      next: \"from\"\n    },\n    // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, \"keyword\", null, \"error\"],\n      sol: true\n    }, {\n      regex: shellsAsArrayRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"array\"\n    }, {\n      regex: exposeRegex,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"expose\"\n    },\n    // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, \"keyword\", null],\n      sol: true,\n      next: \"arguments\"\n    }, {\n      regex: /./,\n      token: null\n    }],\n    from: [{\n      regex: /\\s*$/,\n      token: null,\n      next: \"start\"\n    }, {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, \"error\"],\n      next: \"start\"\n    }, {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, \"keyword\"],\n      next: \"start\"\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }],\n    single: [{\n      regex: /(?:[^\\\\']|\\\\.)/,\n      token: \"string\"\n    }, {\n      regex: /'/,\n      token: \"string\",\n      pop: true\n    }],\n    double: [{\n      regex: /(?:[^\\\\\"]|\\\\.)/,\n      token: \"string\"\n    }, {\n      regex: /\"/,\n      token: \"string\",\n      pop: true\n    }],\n    array: [{\n      regex: /\\]/,\n      token: null,\n      next: \"start\"\n    }, {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n      token: \"string\"\n    }],\n    expose: [{\n      regex: /\\d+$/,\n      token: \"number\",\n      next: \"start\"\n    }, {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: \"start\"\n    }, {\n      regex: /\\d+/,\n      token: \"number\"\n    }, {\n      regex: /[^\\d]+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }],\n    arguments: [{\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: \"comment\"\n    }, {\n      regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /\"/,\n      token: \"string\",\n      push: \"double\"\n    }, {\n      regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /'/,\n      token: \"string\",\n      push: \"single\"\n    }, {\n      regex: /[^#\"']+[\\\\`]$/,\n      token: null\n    }, {\n      regex: /[^#\"']+$/,\n      token: null,\n      next: \"start\"\n    }, {\n      regex: /[^#\"']+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: \"start\"\n    }],\n    meta: {\n      lineComment: \"#\"\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-dockerfile\", \"dockerfile\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","from","fromRegex","RegExp","shells","shellsAsArrayRegex","join","expose","exposeRegex","others","instructions","concat","instructionRegex","instructionOnlyLine","instructionWithArguments","defineSimpleMode","start","regex","sol","token","next","single","pop","double","array","arguments","push","meta","lineComment","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/dockerfile/dockerfile.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var from = \"from\";\n  var fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\n  var shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\n  var shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\n  var expose = \"expose\";\n  var exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\n  var others = [\n    \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n    \"add\", \"copy\", \"volume\", \"user\",\n    \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n  ];\n\n  // Collect all Dockerfile directives\n  var instructions = [from, expose].concat(shells).concat(others),\n      instructionRegex = \"(\" + instructions.join('|') + \")\",\n      instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n      instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\n  CodeMirror.defineSimpleMode(\"dockerfile\", {\n    start: [\n      // Block comment: This is a line starting with a comment\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: fromRegex,\n        token: [null, \"keyword\"],\n        sol: true,\n        next: \"from\"\n      },\n      // Highlight an instruction without any arguments (for convenience)\n      {\n        regex: instructionOnlyLine,\n        token: [null, \"keyword\", null, \"error\"],\n        sol: true\n      },\n      {\n        regex: shellsAsArrayRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"array\"\n      },\n      {\n        regex: exposeRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"expose\"\n      },\n      // Highlight an instruction followed by arguments\n      {\n        regex: instructionWithArguments,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"arguments\"\n      },\n      {\n        regex: /./,\n        token: null\n      }\n    ],\n    from: [\n      {\n        regex: /\\s*$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        // Line comment without instruction arguments is an error\n        regex: /(\\s*)(#.*)$/,\n        token: [null, \"error\"],\n        next: \"start\"\n      },\n      {\n        regex: /(\\s*\\S+\\s+)(as)/i,\n        token: [null, \"keyword\"],\n        next: \"start\"\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    single: [\n      {\n        regex: /(?:[^\\\\']|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    double: [\n      {\n        regex: /(?:[^\\\\\"]|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    array: [\n      {\n        regex: /\\]/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n        token: \"string\"\n      }\n    ],\n    expose: [\n      {\n        regex: /\\d+$/,\n        token: \"number\",\n        next: \"start\"\n      },\n      {\n        regex: /[^\\d]+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\\d+/,\n        token: \"number\"\n      },\n      {\n        regex: /[^\\d]+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    arguments: [\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        push: \"double\"\n      },\n      {\n        regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        push: \"single\"\n      },\n      {\n        regex: /[^#\"']+[\\\\`]$/,\n        token: null\n      },\n      {\n        regex: /[^#\"']+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /[^#\"']+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    meta: {\n      lineComment: \"#\"\n    }\n  });\n\n  CodeMirror.defineMIME(\"text/x-dockerfile\", \"dockerfile\");\n});\n"],"mappings":"AAAA;AACA;;AAEA,CAAC,UAASA,GAAG,EAAE;EACb,IAAI,OAAOC,OAAO,IAAI,QAAQ,IAAI,OAAOC,MAAM,IAAI,QAAQ;IAAE;IAC3DF,GAAG,CAACG,OAAO,CAAC,sBAAsB,CAAC,EAAEA,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAC,KACtE,IAAI,OAAOC,MAAM,IAAI,UAAU,IAAIA,MAAM,CAACC,GAAG;IAAE;IAClDD,MAAM,CAAC,CAAC,sBAAsB,EAAE,yBAAyB,CAAC,EAAEJ,GAAG,CAAC,CAAC;IAC9D;IACHA,GAAG,CAACM,UAAU,CAAC;AACnB,CAAC,EAAE,UAASA,UAAU,EAAE;EACtB,YAAY;;EAEZ,IAAIC,IAAI,GAAG,MAAM;EACjB,IAAIC,SAAS,GAAG,IAAIC,MAAM,CAAC,aAAa,GAAGF,IAAI,GAAG,MAAM,EAAE,GAAG,CAAC;EAE9D,IAAIG,MAAM,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,CAAC;EAClD,IAAIC,kBAAkB,GAAG,IAAIF,MAAM,CAAC,UAAU,GAAGC,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC,GAAG,YAAY,EAAE,GAAG,CAAC;EAEtF,IAAIC,MAAM,GAAG,QAAQ;EACrB,IAAIC,WAAW,GAAG,IAAIL,MAAM,CAAC,UAAU,GAAGI,MAAM,GAAG,SAAS,EAAE,GAAG,CAAC;EAElE,IAAIE,MAAM,GAAG,CACX,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,KAAK,EAC3C,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAC/B,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,aAAa,EAAE,OAAO,CAC3D;;EAED;EACA,IAAIC,YAAY,GAAG,CAACT,IAAI,EAAEM,MAAM,CAAC,CAACI,MAAM,CAACP,MAAM,CAAC,CAACO,MAAM,CAACF,MAAM,CAAC;IAC3DG,gBAAgB,GAAG,GAAG,GAAGF,YAAY,CAACJ,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;IACrDO,mBAAmB,GAAG,IAAIV,MAAM,CAAC,SAAS,GAAGS,gBAAgB,GAAG,eAAe,EAAE,GAAG,CAAC;IACrFE,wBAAwB,GAAG,IAAIX,MAAM,CAAC,SAAS,GAAGS,gBAAgB,GAAG,QAAQ,EAAE,GAAG,CAAC;EAEvFZ,UAAU,CAACe,gBAAgB,CAAC,YAAY,EAAE;IACxCC,KAAK,EAAE;IACL;IACA;MACEC,KAAK,EAAE,UAAU;MACjBC,GAAG,EAAE,IAAI;MACTC,KAAK,EAAE;IACT,CAAC,EACD;MACEF,KAAK,EAAEf,SAAS;MAChBiB,KAAK,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC;MACxBD,GAAG,EAAE,IAAI;MACTE,IAAI,EAAE;IACR,CAAC;IACD;IACA;MACEH,KAAK,EAAEJ,mBAAmB;MAC1BM,KAAK,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC;MACvCD,GAAG,EAAE;IACP,CAAC,EACD;MACED,KAAK,EAAEZ,kBAAkB;MACzBc,KAAK,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC;MAC9BD,GAAG,EAAE,IAAI;MACTE,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAET,WAAW;MAClBW,KAAK,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC;MAC9BD,GAAG,EAAE,IAAI;MACTE,IAAI,EAAE;IACR,CAAC;IACD;IACA;MACEH,KAAK,EAAEH,wBAAwB;MAC/BK,KAAK,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC;MAC9BD,GAAG,EAAE,IAAI;MACTE,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,GAAG;MACVE,KAAK,EAAE;IACT,CAAC,CACF;IACDlB,IAAI,EAAE,CACJ;MACEgB,KAAK,EAAE,MAAM;MACbE,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE;IACR,CAAC,EACD;MACE;MACAH,KAAK,EAAE,aAAa;MACpBE,KAAK,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;MACtBC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,kBAAkB;MACzBE,KAAK,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC;MACxBC,IAAI,EAAE;IACR,CAAC;IACD;IACA;MACED,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE;IACR,CAAC,CACF;IACDC,MAAM,EAAE,CACN;MACEJ,KAAK,EAAE,gBAAgB;MACvBE,KAAK,EAAE;IACT,CAAC,EACD;MACEF,KAAK,EAAE,GAAG;MACVE,KAAK,EAAE,QAAQ;MACfG,GAAG,EAAE;IACP,CAAC,CACF;IACDC,MAAM,EAAE,CACN;MACEN,KAAK,EAAE,gBAAgB;MACvBE,KAAK,EAAE;IACT,CAAC,EACD;MACEF,KAAK,EAAE,GAAG;MACVE,KAAK,EAAE,QAAQ;MACfG,GAAG,EAAE;IACP,CAAC,CACF;IACDE,KAAK,EAAE,CACL;MACEP,KAAK,EAAE,IAAI;MACXE,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,oBAAoB;MAC3BE,KAAK,EAAE;IACT,CAAC,CACF;IACDZ,MAAM,EAAE,CACN;MACEU,KAAK,EAAE,MAAM;MACbE,KAAK,EAAE,QAAQ;MACfC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,SAAS;MAChBE,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,KAAK;MACZE,KAAK,EAAE;IACT,CAAC,EACD;MACEF,KAAK,EAAE,QAAQ;MACfE,KAAK,EAAE;IACT,CAAC;IACD;IACA;MACEA,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE;IACR,CAAC,CACF;IACDK,SAAS,EAAE,CACT;MACER,KAAK,EAAE,UAAU;MACjBC,GAAG,EAAE,IAAI;MACTC,KAAK,EAAE;IACT,CAAC,EACD;MACEF,KAAK,EAAE,qBAAqB;MAC5BE,KAAK,EAAE,QAAQ;MACfC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,GAAG;MACVE,KAAK,EAAE,QAAQ;MACfO,IAAI,EAAE;IACR,CAAC,EACD;MACET,KAAK,EAAE,qBAAqB;MAC5BE,KAAK,EAAE,QAAQ;MACfC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,GAAG;MACVE,KAAK,EAAE,QAAQ;MACfO,IAAI,EAAE;IACR,CAAC,EACD;MACET,KAAK,EAAE,eAAe;MACtBE,KAAK,EAAE;IACT,CAAC,EACD;MACEF,KAAK,EAAE,UAAU;MACjBE,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE;IACR,CAAC,EACD;MACEH,KAAK,EAAE,SAAS;MAChBE,KAAK,EAAE;IACT,CAAC;IACD;IACA;MACEA,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE;IACR,CAAC,CACF;IACDO,IAAI,EAAE;MACJC,WAAW,EAAE;IACf;EACF,CAAC,CAAC;EAEF5B,UAAU,CAAC6B,UAAU,CAAC,mBAAmB,EAAE,YAAY,CAAC;AAC1D,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}