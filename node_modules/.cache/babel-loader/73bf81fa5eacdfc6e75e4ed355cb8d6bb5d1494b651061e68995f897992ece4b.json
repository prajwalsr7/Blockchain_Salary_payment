{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tcl\", function () {\n    function parseWords(str) {\n      var obj = {},\n        words = str.split(\" \");\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n      return obj;\n    }\n    var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" + \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" + \"binary break catch cd close concat continue dde eof encoding error \" + \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" + \"filename flush for foreach format gets glob global history http if \" + \"incr info interp join lappend lindex linsert list llength load lrange \" + \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" + \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" + \"registry regsub rename resource return scan seek set socket source split \" + \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" + \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" + \"tclvars tell time trace unknown unset update uplevel upvar variable \" + \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;else if (ch == \")\") state.inParams = false;\n        return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\")) return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/)) return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word)) return \"keyword\";\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\") maybeEnd++;else if (ch != \" \") maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","tokenString","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","quote","escaped","end","maybeEnd","startState","token","eatSpace","lineComment","defineMIME"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/tcl/tcl.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"tcl\", function() {\n  function parseWords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n        \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n        \"binary break catch cd close concat continue dde eof encoding error \" +\n        \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n        \"filename flush for foreach format gets glob global history http if \" +\n        \"incr info interp join lappend lindex linsert list llength load lrange \" +\n        \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n        \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n        \"registry regsub rename resource return scan seek set socket source split \" +\n        \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n        \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n        \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n    \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;\n        else if (ch == \")\") state.inParams = false;\n          return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\"))\n          return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n          return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word))\n          return \"keyword\";\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\")\n          maybeEnd++;\n        else if (ch != \" \")\n          maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    return {\n      startState: function() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      lineComment: \"#\"\n    };\n});\nCodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}