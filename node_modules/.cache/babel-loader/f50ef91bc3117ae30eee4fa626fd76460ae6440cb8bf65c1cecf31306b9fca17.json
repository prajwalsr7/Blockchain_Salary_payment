{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"puppet\", function () {\n    // Stores the words from the define method\n    var words = {};\n    // Taken, mostly, from the Puppet official variable standards regex\n    var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;\n\n    // Takes a string of words separated by spaces and adds them as\n    // keys with the value of the first argument 'style'\n    function define(style, string) {\n      var split = string.split(' ');\n      for (var i = 0; i < split.length; i++) {\n        words[split[i]] = style;\n      }\n    }\n\n    // Takes commonly known puppet types/words and classifies them to a style\n    define('keyword', 'class define site node include import inherits');\n    define('keyword', 'case if else in and elsif default or');\n    define('atom', 'false true running present absent file directory undef');\n    define('builtin', 'action augeas burst chain computer cron destination dport exec ' + 'file filebucket group host icmp iniface interface jump k5login limit log_level ' + 'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' + 'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' + 'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' + 'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' + 'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' + 'resources router schedule scheduled_task selboolean selmodule service source ' + 'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' + 'user vlan yumrepo zfs zone zpool');\n\n    // After finding a start of a string ('|\") this function attempts to find the end;\n    // If a variable is encountered along the way, we display it differently when it\n    // is encapsulated in a double-quoted string.\n    function tokenString(stream, state) {\n      var current,\n        prev,\n        found_var = false;\n      while (!stream.eol() && (current = stream.next()) != state.pending) {\n        if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n          found_var = true;\n          break;\n        }\n        prev = current;\n      }\n      if (found_var) {\n        stream.backUp(1);\n      }\n      if (current == state.pending) {\n        state.continueString = false;\n      } else {\n        state.continueString = true;\n      }\n      return \"string\";\n    }\n\n    // Main function\n    function tokenize(stream, state) {\n      // Matches one whole word\n      var word = stream.match(/[\\w]+/, false);\n      // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)\n      var attribute = stream.match(/(\\s+)?\\w+\\s+=>.*/, false);\n      // Matches non-builtin resource declarations\n      // (i.e. \"apache::vhost {\" or \"mycustomclasss {\" would be matched)\n      var resource = stream.match(/(\\s+)?[\\w:_]+(\\s+)?{/, false);\n      // Matches virtual and exported resources (i.e. @@user { ; and the like)\n      var special_resource = stream.match(/(\\s+)?[@]{1,2}[\\w:_]+(\\s+)?{/, false);\n\n      // Finally advance the stream\n      var ch = stream.next();\n\n      // Have we found a variable?\n      if (ch === '$') {\n        if (stream.match(variable_regex)) {\n          // If so, and its in a string, assign it a different color\n          return state.continueString ? 'variable-2' : 'variable';\n        }\n        // Otherwise return an invalid variable\n        return \"error\";\n      }\n      // Should we still be looking for the end of a string?\n      if (state.continueString) {\n        // If so, go through the loop again\n        stream.backUp(1);\n        return tokenString(stream, state);\n      }\n      // Are we in a definition (class, node, define)?\n      if (state.inDefinition) {\n        // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)\n        if (stream.match(/(\\s+)?[\\w:_]+(\\s+)?/)) {\n          return 'def';\n        }\n        // Match the rest it the next time around\n        stream.match(/\\s+{/);\n        state.inDefinition = false;\n      }\n      // Are we in an 'include' statement?\n      if (state.inInclude) {\n        // Match and return the included class\n        stream.match(/(\\s+)?\\S+(\\s+)?/);\n        state.inInclude = false;\n        return 'def';\n      }\n      // Do we just have a function on our hands?\n      // In 'ensure_resource(\"myclass\")', 'ensure_resource' is matched\n      if (stream.match(/(\\s+)?\\w+\\(/)) {\n        stream.backUp(1);\n        return 'def';\n      }\n      // Have we matched the prior attribute regex?\n      if (attribute) {\n        stream.match(/(\\s+)?\\w+/);\n        return 'tag';\n      }\n      // Do we have Puppet specific words?\n      if (word && words.hasOwnProperty(word)) {\n        // Negates the initial next()\n        stream.backUp(1);\n        // rs move the stream\n        stream.match(/[\\w]+/);\n        // We want to process these words differently\n        // do to the importance they have in Puppet\n        if (stream.match(/\\s+\\S+\\s+{/, false)) {\n          state.inDefinition = true;\n        }\n        if (word == 'include') {\n          state.inInclude = true;\n        }\n        // Returns their value as state in the prior define methods\n        return words[word];\n      }\n      // Is there a match on a reference?\n      if (/(^|\\s+)[A-Z][\\w:_]+/.test(word)) {\n        // Negate the next()\n        stream.backUp(1);\n        // Match the full reference\n        stream.match(/(^|\\s+)[A-Z][\\w:_]+/);\n        return 'def';\n      }\n      // Have we matched the prior resource regex?\n      if (resource) {\n        stream.match(/(\\s+)?[\\w:_]+/);\n        return 'def';\n      }\n      // Have we matched the prior special_resource regex?\n      if (special_resource) {\n        stream.match(/(\\s+)?[@]{1,2}/);\n        return 'special';\n      }\n      // Match all the comments. All of them.\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      // Have we found a string?\n      if (ch == \"'\" || ch == '\"') {\n        // Store the type (single or double)\n        state.pending = ch;\n        // Perform the looping function to find the end\n        return tokenString(stream, state);\n      }\n      // Match all the brackets\n      if (ch == '{' || ch == '}') {\n        return 'bracket';\n      }\n      // Match characters that we are going to assume\n      // are trying to be regex\n      if (ch == '/') {\n        stream.match(/^[^\\/]*\\//);\n        return 'variable-3';\n      }\n      // Match all the numbers\n      if (ch.match(/[0-9]/)) {\n        stream.eatWhile(/[0-9]+/);\n        return 'number';\n      }\n      // Match the '=' and '=>' operators\n      if (ch == '=') {\n        if (stream.peek() == '>') {\n          stream.next();\n        }\n        return \"operator\";\n      }\n      // Keep advancing through all the rest\n      stream.eatWhile(/[\\w-]/);\n      // Return a blank line for everything else\n      return null;\n    }\n    // Start it all\n    return {\n      startState: function () {\n        var state = {};\n        state.inDefinition = false;\n        state.inInclude = false;\n        state.continueString = false;\n        state.pending = false;\n        return state;\n      },\n      token: function (stream, state) {\n        // Strip the spaces, but regex will account for them eitherway\n        if (stream.eatSpace()) return null;\n        // Go through the main process\n        return tokenize(stream, state);\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-puppet\", \"puppet\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","words","variable_regex","style","string","split","i","length","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","tokenize","word","match","attribute","resource","special_resource","ch","inDefinition","inInclude","hasOwnProperty","test","skipToEnd","eatWhile","peek","startState","token","eatSpace","defineMIME"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/puppet/puppet.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"puppet\", function () {\n  // Stores the words from the define method\n  var words = {};\n  // Taken, mostly, from the Puppet official variable standards regex\n  var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;\n\n  // Takes a string of words separated by spaces and adds them as\n  // keys with the value of the first argument 'style'\n  function define(style, string) {\n    var split = string.split(' ');\n    for (var i = 0; i < split.length; i++) {\n      words[split[i]] = style;\n    }\n  }\n\n  // Takes commonly known puppet types/words and classifies them to a style\n  define('keyword', 'class define site node include import inherits');\n  define('keyword', 'case if else in and elsif default or');\n  define('atom', 'false true running present absent file directory undef');\n  define('builtin', 'action augeas burst chain computer cron destination dport exec ' +\n    'file filebucket group host icmp iniface interface jump k5login limit log_level ' +\n    'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' +\n    'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' +\n    'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' +\n    'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' +\n    'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' +\n    'resources router schedule scheduled_task selboolean selmodule service source ' +\n    'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' +\n    'user vlan yumrepo zfs zone zpool');\n\n  // After finding a start of a string ('|\") this function attempts to find the end;\n  // If a variable is encountered along the way, we display it differently when it\n  // is encapsulated in a double-quoted string.\n  function tokenString(stream, state) {\n    var current, prev, found_var = false;\n    while (!stream.eol() && (current = stream.next()) != state.pending) {\n      if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n        found_var = true;\n        break;\n      }\n      prev = current;\n    }\n    if (found_var) {\n      stream.backUp(1);\n    }\n    if (current == state.pending) {\n      state.continueString = false;\n    } else {\n      state.continueString = true;\n    }\n    return \"string\";\n  }\n\n  // Main function\n  function tokenize(stream, state) {\n    // Matches one whole word\n    var word = stream.match(/[\\w]+/, false);\n    // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)\n    var attribute = stream.match(/(\\s+)?\\w+\\s+=>.*/, false);\n    // Matches non-builtin resource declarations\n    // (i.e. \"apache::vhost {\" or \"mycustomclasss {\" would be matched)\n    var resource = stream.match(/(\\s+)?[\\w:_]+(\\s+)?{/, false);\n    // Matches virtual and exported resources (i.e. @@user { ; and the like)\n    var special_resource = stream.match(/(\\s+)?[@]{1,2}[\\w:_]+(\\s+)?{/, false);\n\n    // Finally advance the stream\n    var ch = stream.next();\n\n    // Have we found a variable?\n    if (ch === '$') {\n      if (stream.match(variable_regex)) {\n        // If so, and its in a string, assign it a different color\n        return state.continueString ? 'variable-2' : 'variable';\n      }\n      // Otherwise return an invalid variable\n      return \"error\";\n    }\n    // Should we still be looking for the end of a string?\n    if (state.continueString) {\n      // If so, go through the loop again\n      stream.backUp(1);\n      return tokenString(stream, state);\n    }\n    // Are we in a definition (class, node, define)?\n    if (state.inDefinition) {\n      // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)\n      if (stream.match(/(\\s+)?[\\w:_]+(\\s+)?/)) {\n        return 'def';\n      }\n      // Match the rest it the next time around\n      stream.match(/\\s+{/);\n      state.inDefinition = false;\n    }\n    // Are we in an 'include' statement?\n    if (state.inInclude) {\n      // Match and return the included class\n      stream.match(/(\\s+)?\\S+(\\s+)?/);\n      state.inInclude = false;\n      return 'def';\n    }\n    // Do we just have a function on our hands?\n    // In 'ensure_resource(\"myclass\")', 'ensure_resource' is matched\n    if (stream.match(/(\\s+)?\\w+\\(/)) {\n      stream.backUp(1);\n      return 'def';\n    }\n    // Have we matched the prior attribute regex?\n    if (attribute) {\n      stream.match(/(\\s+)?\\w+/);\n      return 'tag';\n    }\n    // Do we have Puppet specific words?\n    if (word && words.hasOwnProperty(word)) {\n      // Negates the initial next()\n      stream.backUp(1);\n      // rs move the stream\n      stream.match(/[\\w]+/);\n      // We want to process these words differently\n      // do to the importance they have in Puppet\n      if (stream.match(/\\s+\\S+\\s+{/, false)) {\n        state.inDefinition = true;\n      }\n      if (word == 'include') {\n        state.inInclude = true;\n      }\n      // Returns their value as state in the prior define methods\n      return words[word];\n    }\n    // Is there a match on a reference?\n    if (/(^|\\s+)[A-Z][\\w:_]+/.test(word)) {\n      // Negate the next()\n      stream.backUp(1);\n      // Match the full reference\n      stream.match(/(^|\\s+)[A-Z][\\w:_]+/);\n      return 'def';\n    }\n    // Have we matched the prior resource regex?\n    if (resource) {\n      stream.match(/(\\s+)?[\\w:_]+/);\n      return 'def';\n    }\n    // Have we matched the prior special_resource regex?\n    if (special_resource) {\n      stream.match(/(\\s+)?[@]{1,2}/);\n      return 'special';\n    }\n    // Match all the comments. All of them.\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    // Have we found a string?\n    if (ch == \"'\" || ch == '\"') {\n      // Store the type (single or double)\n      state.pending = ch;\n      // Perform the looping function to find the end\n      return tokenString(stream, state);\n    }\n    // Match all the brackets\n    if (ch == '{' || ch == '}') {\n      return 'bracket';\n    }\n    // Match characters that we are going to assume\n    // are trying to be regex\n    if (ch == '/') {\n      stream.match(/^[^\\/]*\\//);\n      return 'variable-3';\n    }\n    // Match all the numbers\n    if (ch.match(/[0-9]/)) {\n      stream.eatWhile(/[0-9]+/);\n      return 'number';\n    }\n    // Match the '=' and '=>' operators\n    if (ch == '=') {\n      if (stream.peek() == '>') {\n          stream.next();\n      }\n      return \"operator\";\n    }\n    // Keep advancing through all the rest\n    stream.eatWhile(/[\\w-]/);\n    // Return a blank line for everything else\n    return null;\n  }\n  // Start it all\n  return {\n    startState: function () {\n      var state = {};\n      state.inDefinition = false;\n      state.inInclude = false;\n      state.continueString = false;\n      state.pending = false;\n      return state;\n    },\n    token: function (stream, state) {\n      // Strip the spaces, but regex will account for them eitherway\n      if (stream.eatSpace()) return null;\n      // Go through the main process\n      return tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-puppet\", \"puppet\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}