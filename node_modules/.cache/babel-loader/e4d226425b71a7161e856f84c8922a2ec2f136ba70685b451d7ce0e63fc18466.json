{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n  CodeMirror.defineMode(\"asciiarmor\", function () {\n    return {\n      token: function (stream, state) {\n        var m;\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function (state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function () {\n        return {\n          state: \"top\",\n          type: null\n        };\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","errorIfNotEmpty","stream","nonWS","match","skipToEnd","defineMode","token","state","m","sol","type","result","eatWhile","next","blankLine","startState","defineMIME"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/asciiarmor/asciiarmor.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n\n  CodeMirror.defineMode(\"asciiarmor\", function() {\n    return {\n      token: function(stream, state) {\n        var m;\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function(state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function() {\n        return {state: \"top\", type: null};\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});\n"],"mappings":"AAAA;AACA;;AAEA,CAAC,UAASA,GAAG,EAAE;EACb,IAAI,OAAOC,OAAO,IAAI,QAAQ,IAAI,OAAOC,MAAM,IAAI,QAAQ;IAAE;IAC3DF,GAAG,CAACG,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,KAClC,IAAI,OAAOC,MAAM,IAAI,UAAU,IAAIA,MAAM,CAACC,GAAG;IAAE;IAClDD,MAAM,CAAC,CAAC,sBAAsB,CAAC,EAAEJ,GAAG,CAAC,CAAC;IACnC;IACHA,GAAG,CAACM,UAAU,CAAC;AACnB,CAAC,EAAE,UAASA,UAAU,EAAE;EACtB,YAAY;;EAEZ,SAASC,eAAeA,CAACC,MAAM,EAAE;IAC/B,IAAIC,KAAK,GAAGD,MAAM,CAACE,KAAK,CAAC,QAAQ,CAAC;IAClCF,MAAM,CAACG,SAAS,CAAC,CAAC;IAClB,OAAOF,KAAK,GAAG,OAAO,GAAG,IAAI;EAC/B;EAEAH,UAAU,CAACM,UAAU,CAAC,YAAY,EAAE,YAAW;IAC7C,OAAO;MACLC,KAAK,EAAE,SAAAA,CAASL,MAAM,EAAEM,KAAK,EAAE;QAC7B,IAAIC,CAAC;QACL,IAAID,KAAK,CAACA,KAAK,IAAI,KAAK,EAAE;UACxB,IAAIN,MAAM,CAACQ,GAAG,CAAC,CAAC,KAAKD,CAAC,GAAGP,MAAM,CAACE,KAAK,CAAC,4BAA4B,CAAC,CAAC,EAAE;YACpEI,KAAK,CAACA,KAAK,GAAG,SAAS;YACvBA,KAAK,CAACG,IAAI,GAAGF,CAAC,CAAC,CAAC,CAAC;YACjB,OAAO,KAAK;UACd;UACA,OAAOR,eAAe,CAACC,MAAM,CAAC;QAChC,CAAC,MAAM,IAAIM,KAAK,CAACA,KAAK,IAAI,SAAS,EAAE;UACnC,IAAIN,MAAM,CAACQ,GAAG,CAAC,CAAC,IAAIR,MAAM,CAACE,KAAK,CAAC,OAAO,CAAC,EAAE;YACzCI,KAAK,CAACA,KAAK,GAAG,QAAQ;YACtB,OAAO,MAAM;UACf,CAAC,MAAM;YACL,IAAII,MAAM,GAAGX,eAAe,CAACC,MAAM,CAAC;YACpC,IAAIU,MAAM,EAAEJ,KAAK,CAACA,KAAK,GAAG,MAAM;YAChC,OAAOI,MAAM;UACf;QACF,CAAC,MAAM,IAAIJ,KAAK,CAACA,KAAK,IAAI,QAAQ,EAAE;UAClCN,MAAM,CAACG,SAAS,CAAC,CAAC;UAClBG,KAAK,CAACA,KAAK,GAAG,SAAS;UACvB,OAAO,QAAQ;QACjB,CAAC,MAAM,IAAIA,KAAK,CAACA,KAAK,IAAI,MAAM,EAAE;UAChC,IAAIN,MAAM,CAACQ,GAAG,CAAC,CAAC,KAAKD,CAAC,GAAGP,MAAM,CAACE,KAAK,CAAC,0BAA0B,CAAC,CAAC,EAAE;YAClE,IAAIK,CAAC,CAAC,CAAC,CAAC,IAAID,KAAK,CAACG,IAAI,EAAE,OAAO,OAAO;YACtCH,KAAK,CAACA,KAAK,GAAG,KAAK;YACnB,OAAO,KAAK;UACd,CAAC,MAAM;YACL,IAAIN,MAAM,CAACW,QAAQ,CAAC,iBAAiB,CAAC,EAAE;cACtC,OAAO,IAAI;YACb,CAAC,MAAM;cACLX,MAAM,CAACY,IAAI,CAAC,CAAC;cACb,OAAO,OAAO;YAChB;UACF;QACF,CAAC,MAAM,IAAIN,KAAK,CAACA,KAAK,IAAI,KAAK,EAAE;UAC/B,OAAOP,eAAe,CAACC,MAAM,CAAC;QAChC;MACF,CAAC;MACDa,SAAS,EAAE,SAAAA,CAASP,KAAK,EAAE;QACzB,IAAIA,KAAK,CAACA,KAAK,IAAI,SAAS,EAAEA,KAAK,CAACA,KAAK,GAAG,MAAM;MACpD,CAAC;MACDQ,UAAU,EAAE,SAAAA,CAAA,EAAW;QACrB,OAAO;UAACR,KAAK,EAAE,KAAK;UAAEG,IAAI,EAAE;QAAI,CAAC;MACnC;IACF,CAAC;EACH,CAAC,CAAC;EAEFX,UAAU,CAACiB,UAAU,CAAC,iBAAiB,EAAE,YAAY,CAAC;EACtDjB,UAAU,CAACiB,UAAU,CAAC,2BAA2B,EAAE,YAAY,CAAC;EAChEjB,UAAU,CAACiB,UAAU,CAAC,sBAAsB,EAAE,YAAY,CAAC;EAC3DjB,UAAU,CAACiB,UAAU,CAAC,2BAA2B,EAAE,YAAY,CAAC;AAClE,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}