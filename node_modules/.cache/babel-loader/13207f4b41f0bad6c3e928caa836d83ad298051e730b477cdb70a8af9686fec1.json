{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn-cfg\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n      keywords = parserConfig.keywords || {},\n      fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions || {},\n      externalCommands = parserConfig.externalCommands || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|]/;\n    var curPunc;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[:=]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      if (ch == \"[\") {\n        stream.eatWhile(/[\\w_\\]]/);\n        return \"number sectionTitle\";\n      }\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (fileNCtrlMaskOptions.propertyIsEnumerable(cur)) return \"negative fileNCtrlMaskOptions\";\n      if (externalCommands.propertyIsEnumerable(cur)) return \"negative externalCommands\";\n      return \"variable\";\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext) {\n              afterNext = afterNext.toLowerCase();\n              if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n            }\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function (basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function (stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      lineComment: \"#\",\n      fold: \"brace\"\n    };\n  });\n  function words(str) {\n    var obj = {},\n      words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  CodeMirror.defineMIME(\"text/x-ttcn-cfg\", {\n    name: \"ttcn-cfg\",\n    keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" + \" TimeStampFormat LogEventTypes SourceInfoFormat\" + \" LogEntityName LogSourceInfo DiskFullAction\" + \" LogFileNumber LogFileSize MatchingHints Detailed\" + \" Compact SubCategories Stack Single None Seconds\" + \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" + \" NumHCs UnixSocketsEnabled LocalAddress\"),\n    fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" + \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" + \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" + \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" + \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" + \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" + \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" + \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" + \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" + \" DEBUG_ENCDEC DEBUG_TESTPORT\" + \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" + \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" + \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" + \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" + \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" + \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" + \" FUNCTION_RND FUNCTION_UNQUALIFIED\" + \" MATCHING_DONE MATCHING_MCSUCCESS\" + \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" + \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" + \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" + \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" + \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" + \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" + \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" + \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" + \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" + \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" + \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" + \" PORTEVENT_PCOUT PORTEVENT_PMIN\" + \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" + \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" + \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" + \" TESTCASE_FINISH TESTCASE_START\" + \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" + \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" + \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" + \" USER_UNQUALIFIED VERDICTOP_FINAL\" + \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" + \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n    externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" + \" EndTestCase\"),\n    multiLineStrings: true\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","keywords","fileNCtrlMaskOptions","externalCommands","multiLineStrings","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","words","str","obj","split","i","length","defineMIME","name"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/ttcn-cfg/ttcn-cfg.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn-cfg\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions || {},\n        externalCommands = parserConfig.externalCommands || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[:=]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\"){\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      if (ch == \"[\"){\n        stream.eatWhile(/[\\w_\\]]/);\n        return \"number sectionTitle\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))\n        return \"negative fileNCtrlMaskOptions\";\n      if (externalCommands.propertyIsEnumerable(cur)) return \"negative externalCommands\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext){\n              afterNext = afterNext.toLowerCase();\n              if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n            && curPunc != ';') || (ctx.type == \"statement\"\n            && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n\n      electricChars: \"{}\",\n      lineComment: \"#\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i)\n      obj[words[i]] = true;\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-cfg\", {\n    name: \"ttcn-cfg\",\n    keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" +\n    \" TimeStampFormat LogEventTypes SourceInfoFormat\" +\n    \" LogEntityName LogSourceInfo DiskFullAction\" +\n    \" LogFileNumber LogFileSize MatchingHints Detailed\" +\n    \" Compact SubCategories Stack Single None Seconds\" +\n    \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" +\n    \" NumHCs UnixSocketsEnabled LocalAddress\"),\n    fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" +\n    \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" +\n    \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" +\n    \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" +\n    \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" +\n    \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" +\n    \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" +\n    \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" +\n    \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" +\n    \" DEBUG_ENCDEC DEBUG_TESTPORT\" +\n    \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" +\n    \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" +\n    \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" +\n    \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" +\n    \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" +\n    \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" +\n    \" FUNCTION_RND FUNCTION_UNQUALIFIED\" +\n    \" MATCHING_DONE MATCHING_MCSUCCESS\" +\n    \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" +\n    \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" +\n    \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" +\n    \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" +\n    \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" +\n    \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" +\n    \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" +\n    \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" +\n    \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" +\n    \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" +\n    \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" +\n    \" PORTEVENT_PCOUT PORTEVENT_PMIN\" +\n    \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" +\n    \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" +\n    \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" +\n    \" TESTCASE_FINISH TESTCASE_START\" +\n    \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" +\n    \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" +\n    \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" +\n    \" USER_UNQUALIFIED VERDICTOP_FINAL\" +\n    \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" +\n    \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n    externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" +\n    \" EndTestCase\"),\n    multiLineStrings: true\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}