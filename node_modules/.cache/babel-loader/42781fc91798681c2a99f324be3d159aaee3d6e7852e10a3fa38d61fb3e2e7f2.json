{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"pig\", function (_config, parserConfig) {\n    var keywords = parserConfig.keywords,\n      builtins = parserConfig.builtins,\n      types = parserConfig.types,\n      multiLineStrings = parserConfig.multiLineStrings;\n    var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenComment(stream, state) {\n      var isEnd = false;\n      var ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && isEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        isEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n        return \"error\";\n      };\n    }\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      // is a start of string?\n      if (ch == '\"' || ch == \"'\") return chain(stream, state, tokenString(ch));\n      // is it one of the special chars\n      else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) return null;\n      // is it a number?\n      else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      // multi line comment or operator\n      else if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          return chain(stream, state, tokenComment);\n        } else {\n          stream.eatWhile(isOperatorChar);\n          return \"operator\";\n        }\n      }\n      // single line comment or operator\n      else if (ch == \"-\") {\n        if (stream.eat(\"-\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else {\n          stream.eatWhile(isOperatorChar);\n          return \"operator\";\n        }\n      }\n      // is it an operator\n      else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      } else {\n        // get the while word\n        stream.eatWhile(/[\\w\\$_]/);\n        // is it one of the listed keywords?\n        if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n          //keywords can be used as variables like flatten(group), group.$0 etc..\n          if (!stream.eat(\")\") && !stream.eat(\".\")) return \"keyword\";\n        }\n        // is it one of the builtin functions?\n        if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) return \"variable-2\";\n        // is it one of the listed types?\n        if (types && types.propertyIsEnumerable(stream.current().toUpperCase())) return \"variable-3\";\n        // default is a 'variable'\n        return \"variable\";\n      }\n    }\n\n    // Interface\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          startOfLine: true\n        };\n      },\n      token: function (stream, state) {\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        return style;\n      }\n    };\n  });\n  (function () {\n    function keywords(str) {\n      var obj = {},\n        words = str.split(\" \");\n      for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n      return obj;\n    }\n\n    // builtin funcs taken from trunk revision 1303237\n    var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \" + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \" + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \" + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \" + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \" + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \" + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \" + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \" + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \" + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n    // taken from QueryLexer.g\n    var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \" + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \" + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \" + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \" + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n    // data types\n    var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n    CodeMirror.defineMIME(\"text/x-pig\", {\n      name: \"pig\",\n      builtins: keywords(pBuiltins),\n      keywords: keywords(pKeywords),\n      types: keywords(pTypes)\n    });\n    CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n  })();\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","_config","parserConfig","keywords","builtins","types","multiLineStrings","isOperatorChar","chain","stream","state","f","tokenize","tokenComment","isEnd","ch","next","tokenBase","tokenString","quote","escaped","end","test","eatWhile","eat","skipToEnd","propertyIsEnumerable","current","toUpperCase","startState","startOfLine","token","eatSpace","style","str","obj","words","split","i","length","pBuiltins","pKeywords","pTypes","defineMIME","name","registerHelper"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/pig/pig.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pig\", function(_config, parserConfig) {\n  var keywords = parserConfig.keywords,\n  builtins = parserConfig.builtins,\n  types = parserConfig.types,\n  multiLineStrings = parserConfig.multiLineStrings;\n\n  var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenComment(stream, state) {\n    var isEnd = false;\n    var ch;\n    while(ch = stream.next()) {\n      if(ch == \"/\" && isEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      isEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"error\";\n    };\n  }\n\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    // is a start of string?\n    if (ch == '\"' || ch == \"'\")\n      return chain(stream, state, tokenString(ch));\n    // is it one of the special chars\n    else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n      return null;\n    // is it a number?\n    else if(/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    // multi line comment or operator\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // single line comment or operator\n    else if (ch==\"-\") {\n      if(stream.eat(\"-\")){\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // is it an operator\n    else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    else {\n      // get the while word\n      stream.eatWhile(/[\\w\\$_]/);\n      // is it one of the listed keywords?\n      if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n        //keywords can be used as variables like flatten(group), group.$0 etc..\n        if (!stream.eat(\")\") && !stream.eat(\".\"))\n          return \"keyword\";\n      }\n      // is it one of the builtin functions?\n      if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-2\";\n      // is it one of the listed types?\n      if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-3\";\n      // default is a 'variable'\n      return \"variable\";\n    }\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      if(stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\n(function() {\n  function keywords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  // builtin funcs taken from trunk revision 1303237\n  var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n  // taken from QueryLexer.g\n  var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n  // data types\n  var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n\n  CodeMirror.defineMIME(\"text/x-pig\", {\n    name: \"pig\",\n    builtins: keywords(pBuiltins),\n    keywords: keywords(pKeywords),\n    types: keywords(pTypes)\n  });\n\n  CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n}());\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}