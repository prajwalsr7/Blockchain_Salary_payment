{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"julia\", function (config, parserConf) {\n    function wordRegexp(words, end) {\n      if (typeof end === \"undefined\") {\n        end = \"\\\\b\";\n      }\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\" + end);\n    }\n    var octChar = \"\\\\\\\\[0-7]{1,3}\";\n    var hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\n    var sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\n    var uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n    var operators = parserConf.operators || wordRegexp([\"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"->\", \"\\\\/\\\\/\", \"[\\\\\\\\%*+\\\\-<>!=\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\", \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\", \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\", \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\", \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"], \"\");\n    var delimiters = parserConf.delimiters || /^[;,()[\\]{}]/;\n    var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n    var chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n    var openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\", \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\", \"finally\", \"catch\", \"do\"];\n    var closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n    var keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\", \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\", \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\", \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\", \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\", \"bitstype\"];\n    var builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n    CodeMirror.registerHelper(\"hintWords\", \"julia\", keywordsList.concat(builtinsList));\n    var openers = wordRegexp(openersList);\n    var closers = wordRegexp(closersList);\n    var keywords = wordRegexp(keywordsList);\n    var builtins = wordRegexp(builtinsList);\n    var macro = /^@[_A-Za-z][\\w]*/;\n    var symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n    var stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n    function inArray(state) {\n      return state.nestedArrays > 0;\n    }\n    function inGenerator(state) {\n      return state.nestedGenerators > 0;\n    }\n    function currentScope(state, n) {\n      if (typeof n === \"undefined\") {\n        n = 0;\n      }\n      if (state.scopes.length <= n) {\n        return null;\n      }\n      return state.scopes[state.scopes.length - (n + 1)];\n    }\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      // Handle multiline comments\n      if (stream.match('#=', false)) {\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n\n      // Handle scope changes\n      var leavingExpr = state.leavingExpr;\n      if (stream.sol()) {\n        leavingExpr = false;\n      }\n      state.leavingExpr = false;\n      if (leavingExpr) {\n        if (stream.match(/^'+/)) {\n          return \"operator\";\n        }\n      }\n      if (stream.match(/\\.{4,}/)) {\n        return \"error\";\n      } else if (stream.match(/\\.{1,3}/)) {\n        return \"operator\";\n      }\n      if (stream.eatSpace()) {\n        return null;\n      }\n      var ch = stream.peek();\n\n      // Handle single line comments\n      if (ch === '#') {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (ch === '[') {\n        state.scopes.push('[');\n        state.nestedArrays++;\n      }\n      if (ch === '(') {\n        state.scopes.push('(');\n        state.nestedGenerators++;\n      }\n      if (inArray(state) && ch === ']') {\n        while (state.scopes.length && currentScope(state) !== \"[\") {\n          state.scopes.pop();\n        }\n        state.scopes.pop();\n        state.nestedArrays--;\n        state.leavingExpr = true;\n      }\n      if (inGenerator(state) && ch === ')') {\n        while (state.scopes.length && currentScope(state) !== \"(\") {\n          state.scopes.pop();\n        }\n        state.scopes.pop();\n        state.nestedGenerators--;\n        state.leavingExpr = true;\n      }\n      if (inArray(state)) {\n        if (state.lastToken == \"end\" && stream.match(':')) {\n          return \"operator\";\n        }\n        if (stream.match('end')) {\n          return \"number\";\n        }\n      }\n      var match;\n      if (match = stream.match(openers, false)) {\n        state.scopes.push(match[0]);\n      }\n      if (stream.match(closers, false)) {\n        state.scopes.pop();\n      }\n\n      // Handle type annotations\n      if (stream.match(/^::(?![:\\$])/)) {\n        state.tokenize = tokenAnnotation;\n        return state.tokenize(stream, state);\n      }\n\n      // Handle symbols\n      if (!leavingExpr && stream.match(symbol) || stream.match(/:([<>]:|<<=?|>>>?=?|->|\\/\\/|\\.{2,3}|[\\.\\\\%*+\\-<>!\\/^|&]=?|[~\\?\\$])/)) {\n        return \"builtin\";\n      }\n\n      // Handle parametric types\n      //if (stream.match(/^{[^}]*}(?=\\()/)) {\n      //  return \"builtin\";\n      //}\n\n      // Handle operators and Delimiters\n      if (stream.match(operators)) {\n        return \"operator\";\n      }\n\n      // Handle Number Literals\n      if (stream.match(/^\\.?\\d/, false)) {\n        var imMatcher = RegExp(/^im\\b/);\n        var numberLiteral = false;\n        if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) {\n          numberLiteral = true;\n        }\n        // Integers\n        if (stream.match(/^0x[0-9a-f_]+/i)) {\n          numberLiteral = true;\n        } // Hex\n        if (stream.match(/^0b[01_]+/i)) {\n          numberLiteral = true;\n        } // Binary\n        if (stream.match(/^0o[0-7_]+/i)) {\n          numberLiteral = true;\n        } // Octal\n        // Floats\n        if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) {\n          numberLiteral = true;\n        }\n        if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) {\n          numberLiteral = true;\n        } // Decimal\n        if (numberLiteral) {\n          // Integer literals may be \"long\"\n          stream.match(imMatcher);\n          state.leavingExpr = true;\n          return \"number\";\n        }\n      }\n\n      // Handle Chars\n      if (stream.match('\\'')) {\n        state.tokenize = tokenChar;\n        return state.tokenize(stream, state);\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenStringFactory(stream.current());\n        return state.tokenize(stream, state);\n      }\n      if (stream.match(macro)) {\n        return \"meta\";\n      }\n      if (stream.match(delimiters)) {\n        return null;\n      }\n      if (stream.match(keywords)) {\n        return \"keyword\";\n      }\n      if (stream.match(builtins)) {\n        return \"builtin\";\n      }\n      var isDefinition = state.isDefinition || state.lastToken == \"function\" || state.lastToken == \"macro\" || state.lastToken == \"type\" || state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n      if (stream.match(identifiers)) {\n        if (isDefinition) {\n          if (stream.peek() === '.') {\n            state.isDefinition = true;\n            return \"variable\";\n          }\n          state.isDefinition = false;\n          return \"def\";\n        }\n        state.leavingExpr = true;\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return \"error\";\n    }\n    function tokenAnnotation(stream, state) {\n      stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n      if (stream.match('{')) {\n        state.nestedParameters++;\n      } else if (stream.match('}') && state.nestedParameters > 0) {\n        state.nestedParameters--;\n      }\n      if (state.nestedParameters > 0) {\n        stream.match(/.*?(?={|})/) || stream.next();\n      } else if (state.nestedParameters == 0) {\n        state.tokenize = tokenBase;\n      }\n      return \"builtin\";\n    }\n    function tokenComment(stream, state) {\n      if (stream.match('#=')) {\n        state.nestedComments++;\n      }\n      if (!stream.match(/.*?(?=(#=|=#))/)) {\n        stream.skipToEnd();\n      }\n      if (stream.match('=#')) {\n        state.nestedComments--;\n        if (state.nestedComments == 0) state.tokenize = tokenBase;\n      }\n      return \"comment\";\n    }\n    function tokenChar(stream, state) {\n      var isChar = false,\n        match;\n      if (stream.match(chars)) {\n        isChar = true;\n      } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n        var value = parseInt(match[1], 16);\n        if (value <= 55295 || value >= 57344) {\n          // (U+0,U+D7FF), (U+E000,U+FFFF)\n          isChar = true;\n          stream.next();\n        }\n      } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n        var value = parseInt(match[1], 16);\n        if (value <= 1114111) {\n          // U+10FFFF\n          isChar = true;\n          stream.next();\n        }\n      }\n      if (isChar) {\n        state.leavingExpr = true;\n        state.tokenize = tokenBase;\n        return \"string\";\n      }\n      if (!stream.match(/^[^']+(?=')/)) {\n        stream.skipToEnd();\n      }\n      if (stream.match('\\'')) {\n        state.tokenize = tokenBase;\n      }\n      return \"error\";\n    }\n    function tokenStringFactory(delimiter) {\n      if (delimiter.substr(-3) === '\"\"\"') {\n        delimiter = '\"\"\"';\n      } else if (delimiter.substr(-1) === '\"') {\n        delimiter = '\"';\n      }\n      function tokenString(stream, state) {\n        if (stream.eat('\\\\')) {\n          stream.next();\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          state.leavingExpr = true;\n          return \"string\";\n        } else {\n          stream.eat(/[`\"]/);\n        }\n        stream.eatWhile(/[^\\\\`\"]/);\n        return \"string\";\n      }\n      return tokenString;\n    }\n    var external = {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          scopes: [],\n          lastToken: null,\n          leavingExpr: false,\n          isDefinition: false,\n          nestedArrays: 0,\n          nestedComments: 0,\n          nestedGenerators: 0,\n          nestedParameters: 0,\n          firstParenPos: -1\n        };\n      },\n      token: function (stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n        if (current && style) {\n          state.lastToken = current;\n        }\n        return style;\n      },\n      indent: function (state, textAfter) {\n        var delta = 0;\n        if (textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) || /^finally/.test(textAfter)) {\n          delta = -1;\n        }\n        return (state.scopes.length + delta) * config.indentUnit;\n      },\n      electricInput: /\\b(end|else|catch|finally)\\b/,\n      blockCommentStart: \"#=\",\n      blockCommentEnd: \"=#\",\n      lineComment: \"#\",\n      closeBrackets: \"()[]{}\\\"\\\"\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-julia\", \"julia\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConf","wordRegexp","words","end","RegExp","join","octChar","hexChar","sChar","uChar","operators","delimiters","identifiers","chars","openersList","closersList","keywordsList","builtinsList","registerHelper","concat","openers","closers","keywords","builtins","macro","symbol","stringPrefixes","inArray","state","nestedArrays","inGenerator","nestedGenerators","currentScope","n","scopes","length","tokenBase","stream","match","tokenize","tokenComment","leavingExpr","sol","eatSpace","ch","peek","skipToEnd","push","pop","lastToken","tokenAnnotation","imMatcher","numberLiteral","tokenChar","tokenStringFactory","current","isDefinition","next","nestedParameters","nestedComments","isChar","value","parseInt","delimiter","substr","tokenString","eat","eatWhile","external","startState","firstParenPos","token","style","indent","textAfter","delta","test","indentUnit","electricInput","blockCommentStart","blockCommentEnd","lineComment","closeBrackets","fold","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/julia/julia.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"julia\", function(config, parserConf) {\n  function wordRegexp(words, end) {\n    if (typeof end === \"undefined\") { end = \"\\\\b\"; }\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\" + end);\n  }\n\n  var octChar = \"\\\\\\\\[0-7]{1,3}\";\n  var hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\n  var sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\n  var uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n\n  var operators = parserConf.operators || wordRegexp([\n        \"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"->\", \"\\\\/\\\\/\",\n        \"[\\\\\\\\%*+\\\\-<>!=\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\",\n        \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\",\n        \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\",\n        \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\",\n        \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"], \"\");\n  var delimiters = parserConf.delimiters || /^[;,()[\\]{}]/;\n  var identifiers = parserConf.identifiers ||\n        /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n\n  var chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n\n  var openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\",\n        \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\n        \"finally\", \"catch\", \"do\"];\n\n  var closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n\n  var keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\",\n        \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\",\n        \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\",\n        \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\",\n        \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\",\n        \"bitstype\"];\n\n  var builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"julia\", keywordsList.concat(builtinsList));\n\n  var openers = wordRegexp(openersList);\n  var closers = wordRegexp(closersList);\n  var keywords = wordRegexp(keywordsList);\n  var builtins = wordRegexp(builtinsList);\n\n  var macro = /^@[_A-Za-z][\\w]*/;\n  var symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\n  var stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\n  function inArray(state) {\n    return (state.nestedArrays > 0);\n  }\n\n  function inGenerator(state) {\n    return (state.nestedGenerators > 0);\n  }\n\n  function currentScope(state, n) {\n    if (typeof(n) === \"undefined\") { n = 0; }\n    if (state.scopes.length <= n) {\n      return null;\n    }\n    return state.scopes[state.scopes.length - (n + 1)];\n  }\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    // Handle multiline comments\n    if (stream.match('#=', false)) {\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle scope changes\n    var leavingExpr = state.leavingExpr;\n    if (stream.sol()) {\n      leavingExpr = false;\n    }\n    state.leavingExpr = false;\n\n    if (leavingExpr) {\n      if (stream.match(/^'+/)) {\n        return \"operator\";\n      }\n    }\n\n    if (stream.match(/\\.{4,}/)) {\n      return \"error\";\n    } else if (stream.match(/\\.{1,3}/)) {\n      return \"operator\";\n    }\n\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n\n    // Handle single line comments\n    if (ch === '#') {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    if (ch === '[') {\n      state.scopes.push('[');\n      state.nestedArrays++;\n    }\n\n    if (ch === '(') {\n      state.scopes.push('(');\n      state.nestedGenerators++;\n    }\n\n    if (inArray(state) && ch === ']') {\n      while (state.scopes.length && currentScope(state) !== \"[\") { state.scopes.pop(); }\n      state.scopes.pop();\n      state.nestedArrays--;\n      state.leavingExpr = true;\n    }\n\n    if (inGenerator(state) && ch === ')') {\n      while (state.scopes.length && currentScope(state) !== \"(\") { state.scopes.pop(); }\n      state.scopes.pop();\n      state.nestedGenerators--;\n      state.leavingExpr = true;\n    }\n\n    if (inArray(state)) {\n      if (state.lastToken == \"end\" && stream.match(':')) {\n        return \"operator\";\n      }\n      if (stream.match('end')) {\n        return \"number\";\n      }\n    }\n\n    var match;\n    if (match = stream.match(openers, false)) {\n      state.scopes.push(match[0]);\n    }\n\n    if (stream.match(closers, false)) {\n      state.scopes.pop();\n    }\n\n    // Handle type annotations\n    if (stream.match(/^::(?![:\\$])/)) {\n      state.tokenize = tokenAnnotation;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle symbols\n    if (!leavingExpr && stream.match(symbol) ||\n        stream.match(/:([<>]:|<<=?|>>>?=?|->|\\/\\/|\\.{2,3}|[\\.\\\\%*+\\-<>!\\/^|&]=?|[~\\?\\$])/)) {\n      return \"builtin\";\n    }\n\n    // Handle parametric types\n    //if (stream.match(/^{[^}]*}(?=\\()/)) {\n    //  return \"builtin\";\n    //}\n\n    // Handle operators and Delimiters\n    if (stream.match(operators)) {\n      return \"operator\";\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^\\.?\\d/, false)) {\n      var imMatcher = RegExp(/^im\\b/);\n      var numberLiteral = false;\n      if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) { numberLiteral = true; }\n      // Integers\n      if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex\n      if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary\n      if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal\n      // Floats\n      if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) { numberLiteral = true; }\n      if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) { numberLiteral = true; } // Decimal\n      if (numberLiteral) {\n          // Integer literals may be \"long\"\n          stream.match(imMatcher);\n          state.leavingExpr = true;\n          return \"number\";\n      }\n    }\n\n    // Handle Chars\n    if (stream.match('\\'')) {\n      state.tokenize = tokenChar;\n      return state.tokenize(stream, state);\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenStringFactory(stream.current());\n      return state.tokenize(stream, state);\n    }\n\n    if (stream.match(macro)) {\n      return \"meta\";\n    }\n\n    if (stream.match(delimiters)) {\n      return null;\n    }\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(builtins)) {\n      return \"builtin\";\n    }\n\n    var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\n                       state.lastToken == \"macro\" || state.lastToken == \"type\" ||\n                       state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n    if (stream.match(identifiers)) {\n      if (isDefinition) {\n        if (stream.peek() === '.') {\n          state.isDefinition = true;\n          return \"variable\";\n        }\n        state.isDefinition = false;\n        return \"def\";\n      }\n      state.leavingExpr = true;\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return \"error\";\n  }\n\n  function tokenAnnotation(stream, state) {\n    stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n    if (stream.match('{')) {\n      state.nestedParameters++;\n    } else if (stream.match('}') && state.nestedParameters > 0) {\n      state.nestedParameters--;\n    }\n    if (state.nestedParameters > 0) {\n      stream.match(/.*?(?={|})/) || stream.next();\n    } else if (state.nestedParameters == 0) {\n      state.tokenize = tokenBase;\n    }\n    return \"builtin\";\n  }\n\n  function tokenComment(stream, state) {\n    if (stream.match('#=')) {\n      state.nestedComments++;\n    }\n    if (!stream.match(/.*?(?=(#=|=#))/)) {\n      stream.skipToEnd();\n    }\n    if (stream.match('=#')) {\n      state.nestedComments--;\n      if (state.nestedComments == 0)\n        state.tokenize = tokenBase;\n    }\n    return \"comment\";\n  }\n\n  function tokenChar(stream, state) {\n    var isChar = false, match;\n    if (stream.match(chars)) {\n      isChar = true;\n    } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n      var value = parseInt(match[1], 16);\n      if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\n        isChar = true;\n        stream.next();\n      }\n    } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n      var value = parseInt(match[1], 16);\n      if (value <= 1114111) { // U+10FFFF\n        isChar = true;\n        stream.next();\n      }\n    }\n    if (isChar) {\n      state.leavingExpr = true;\n      state.tokenize = tokenBase;\n      return \"string\";\n    }\n    if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\n    if (stream.match('\\'')) { state.tokenize = tokenBase; }\n    return \"error\";\n  }\n\n  function tokenStringFactory(delimiter) {\n    if (delimiter.substr(-3) === '\"\"\"') {\n      delimiter = '\"\"\"';\n    } else if (delimiter.substr(-1) === '\"') {\n      delimiter = '\"';\n    }\n    function tokenString(stream, state) {\n      if (stream.eat('\\\\')) {\n        stream.next();\n      } else if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        state.leavingExpr = true;\n        return \"string\";\n      } else {\n        stream.eat(/[`\"]/);\n      }\n      stream.eatWhile(/[^\\\\`\"]/);\n      return \"string\";\n    }\n    return tokenString;\n  }\n\n  var external = {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [],\n        lastToken: null,\n        leavingExpr: false,\n        isDefinition: false,\n        nestedArrays: 0,\n        nestedComments: 0,\n        nestedGenerators: 0,\n        nestedParameters: 0,\n        firstParenPos: -1\n      };\n    },\n\n    token: function(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      if (current && style) {\n        state.lastToken = current;\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var delta = 0;\n      if ( textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) ||\n           /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) ||\n           /^finally/.test(textAfter) ) {\n        delta = -1;\n      }\n      return (state.scopes.length + delta) * config.indentUnit;\n    },\n\n    electricInput: /\\b(end|else|catch|finally)\\b/,\n    blockCommentStart: \"#=\",\n    blockCommentEnd: \"=#\",\n    lineComment: \"#\",\n    closeBrackets: \"()[]{}\\\"\\\"\",\n    fold: \"indent\"\n  };\n  return external;\n});\n\n\nCodeMirror.defineMIME(\"text/x-julia\", \"julia\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}