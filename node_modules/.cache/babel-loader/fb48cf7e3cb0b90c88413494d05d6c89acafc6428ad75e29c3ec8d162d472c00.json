{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"octave\", function () {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n    }\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\n    var singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\n    var doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\n    var doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n    var tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\n    var expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\n    var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n    var builtins = wordRegexp(['error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos', 'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones', 'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov', 'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot', 'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str', 'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember']);\n    var keywords = wordRegexp(['return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction', 'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events', 'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until', 'continue', 'pkg']);\n\n    // tokenizers\n    function tokenTranspose(stream, state) {\n      if (!stream.sol() && stream.peek() === '\\'') {\n        stream.next();\n        state.tokenize = tokenBase;\n        return 'operator';\n      }\n      state.tokenize = tokenBase;\n      return tokenBase(stream, state);\n    }\n    function tokenComment(stream, state) {\n      if (stream.match(/^.*%}/)) {\n        state.tokenize = tokenBase;\n        return 'comment';\n      }\n      ;\n      stream.skipToEnd();\n      return 'comment';\n    }\n    function tokenBase(stream, state) {\n      // whitespaces\n      if (stream.eatSpace()) return null;\n\n      // Handle one line Comments\n      if (stream.match('%{')) {\n        state.tokenize = tokenComment;\n        stream.skipToEnd();\n        return 'comment';\n      }\n      if (stream.match(/^[%#]/)) {\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.+-]/, false)) {\n        if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n          stream.tokenize = tokenBase;\n          return 'number';\n        }\n        ;\n        if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) {\n          return 'number';\n        }\n        ;\n        if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) {\n          return 'number';\n        }\n        ;\n      }\n      if (stream.match(wordRegexp(['nan', 'NaN', 'inf', 'Inf']))) {\n        return 'number';\n      }\n      ;\n\n      // Handle Strings\n      var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);\n      if (m) {\n        return m[1] ? 'string' : \"string error\";\n      }\n\n      // Handle words\n      if (stream.match(keywords)) {\n        return 'keyword';\n      }\n      ;\n      if (stream.match(builtins)) {\n        return 'builtin';\n      }\n      ;\n      if (stream.match(identifiers)) {\n        return 'variable';\n      }\n      ;\n      if (stream.match(singleOperators) || stream.match(doubleOperators)) {\n        return 'operator';\n      }\n      ;\n      if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) {\n        return null;\n      }\n      ;\n      if (stream.match(expressionEnd)) {\n        state.tokenize = tokenTranspose;\n        return null;\n      }\n      ;\n\n      // Handle non-detected items\n      stream.next();\n      return 'error';\n    }\n    ;\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function (stream, state) {\n        var style = state.tokenize(stream, state);\n        if (style === 'number' || style === 'variable') {\n          state.tokenize = tokenTranspose;\n        }\n        return style;\n      },\n      lineComment: '%',\n      fold: 'indent'\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-octave\", \"octave\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","expressionEnd","identifiers","builtins","keywords","tokenTranspose","stream","state","sol","peek","next","tokenize","tokenBase","tokenComment","match","skipToEnd","eatSpace","m","startState","token","style","lineComment","fold","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/octave/octave.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"octave\", function() {\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\n  var singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\n  var doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\n  var doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n  var tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\n  var expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\n  var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\n  var builtins = wordRegexp([\n    'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n    'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n    'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n    'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n    'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n    'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n    'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n  ]);\n\n  var keywords = wordRegexp([\n    'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n    'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n    'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n    'continue', 'pkg'\n  ]);\n\n\n  // tokenizers\n  function tokenTranspose(stream, state) {\n    if (!stream.sol() && stream.peek() === '\\'') {\n      stream.next();\n      state.tokenize = tokenBase;\n      return 'operator';\n    }\n    state.tokenize = tokenBase;\n    return tokenBase(stream, state);\n  }\n\n\n  function tokenComment(stream, state) {\n    if (stream.match(/^.*%}/)) {\n      state.tokenize = tokenBase;\n      return 'comment';\n    };\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  function tokenBase(stream, state) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n\n    // Handle one line Comments\n    if (stream.match('%{')){\n      state.tokenize = tokenComment;\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    if (stream.match(/^[%#]/)){\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n        stream.tokenize = tokenBase;\n        return 'number'; };\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    }\n    if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n    // Handle Strings\n    var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n    if (m) { return m[1] ? 'string' : \"string error\"; }\n\n    // Handle words\n    if (stream.match(keywords)) { return 'keyword'; } ;\n    if (stream.match(builtins)) { return 'builtin'; } ;\n    if (stream.match(identifiers)) { return 'variable'; } ;\n\n    if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n    if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n    if (stream.match(expressionEnd)) {\n      state.tokenize = tokenTranspose;\n      return null;\n    };\n\n\n    // Handle non-detected items\n    stream.next();\n    return 'error';\n  };\n\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      var style = state.tokenize(stream, state);\n      if (style === 'number' || style === 'variable'){\n        state.tokenize = tokenTranspose;\n      }\n      return style;\n    },\n\n    lineComment: '%',\n\n    fold: 'indent'\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-octave\", \"octave\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}