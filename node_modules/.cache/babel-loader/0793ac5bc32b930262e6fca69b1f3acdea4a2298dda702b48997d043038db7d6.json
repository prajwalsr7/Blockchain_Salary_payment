{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn\", function (config, parserConfig) {\n    var indentUnit = config.indentUnit,\n      keywords = parserConfig.keywords || {},\n      builtin = parserConfig.builtin || {},\n      timerOps = parserConfig.timerOps || {},\n      portOps = parserConfig.portOps || {},\n      configOps = parserConfig.configOps || {},\n      verdictOps = parserConfig.verdictOps || {},\n      sutOps = parserConfig.sutOps || {},\n      functionOps = parserConfig.functionOps || {},\n      verdictConsts = parserConfig.verdictConsts || {},\n      booleanConsts = parserConfig.booleanConsts || {},\n      otherConsts = parserConfig.otherConsts || {},\n      types = parserConfig.types || {},\n      visibilityModifiers = parserConfig.visibilityModifiers || {},\n      templateMatch = parserConfig.templateMatch || {},\n      multiLineStrings = parserConfig.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[+\\-*&@=<>!\\/]/;\n    var curPunc;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"atom preprocessor\";\n      }\n      if (ch == \"%\") {\n        stream.eatWhile(/\\b/);\n        return \"atom ttcn3Macros\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        if (ch == \"@\") {\n          if (stream.match(\"try\") || stream.match(\"catch\") || stream.match(\"lazy\")) {\n            return \"keyword\";\n          }\n        }\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n      if (timerOps.propertyIsEnumerable(cur)) return \"def timerOps\";\n      if (configOps.propertyIsEnumerable(cur)) return \"def configOps\";\n      if (verdictOps.propertyIsEnumerable(cur)) return \"def verdictOps\";\n      if (portOps.propertyIsEnumerable(cur)) return \"def portOps\";\n      if (sutOps.propertyIsEnumerable(cur)) return \"def sutOps\";\n      if (functionOps.propertyIsEnumerable(cur)) return \"def functionOps\";\n      if (verdictConsts.propertyIsEnumerable(cur)) return \"string verdictConsts\";\n      if (booleanConsts.propertyIsEnumerable(cur)) return \"string booleanConsts\";\n      if (otherConsts.propertyIsEnumerable(cur)) return \"string otherConsts\";\n      if (types.propertyIsEnumerable(cur)) return \"builtin types\";\n      if (visibilityModifiers.propertyIsEnumerable(cur)) return \"builtin visibilityModifiers\";\n      if (templateMatch.propertyIsEnumerable(cur)) return \"atom templateMatch\";\n      return \"variable\";\n    }\n    function tokenString(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          next,\n          end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {\n            var afterQuote = stream.peek();\n            //look if the character after the quote is like the B in '10100010'B\n            if (afterQuote) {\n              afterQuote = afterQuote.toLowerCase();\n              if (afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\") stream.next();\n            }\n            end = true;\n            break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false,\n        ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = ch == \"*\";\n      }\n      return \"comment\";\n    }\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function (basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n      token: function (stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n          popContext(state);\n        } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n  function words(str) {\n    var obj = {},\n      words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop)) words.push(prop);\n    }\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.timerOps);\n    add(mode.portOps);\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n    for (var i = 0; i < mimes.length; ++i) CodeMirror.defineMIME(mimes[i], mode);\n  }\n  def([\"text/x-ttcn\", \"text/x-ttcn3\", \"text/x-ttcnpp\"], {\n    name: \"ttcn\",\n    keywords: words(\"activate address alive all alt altstep and and4b any\" + \" break case component const continue control deactivate\" + \" display do else encode enumerated except exception\" + \" execute extends extension external for from function\" + \" goto group if import in infinity inout interleave\" + \" label language length log match message mixed mod\" + \" modifies module modulepar mtc noblock not not4b nowait\" + \" of on optional or or4b out override param pattern port\" + \" procedure record recursive rem repeat return runs select\" + \" self sender set signature system template testcase to\" + \" type union value valueof var variant while with xor xor4b\"),\n    builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" + \" decomp decvalue float2int float2str hex2bit hex2int\" + \" hex2oct hex2str int2bit int2char int2float int2hex\" + \" int2oct int2str int2unichar isbound ischosen ispresent\" + \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" + \" oct2str regexp replace rnd sizeof str2bit str2float\" + \" str2hex str2int str2oct substr unichar2int unichar2char\" + \" enum2int\"),\n    types: words(\"anytype bitstring boolean char charstring default float\" + \" hexstring integer objid octetstring universal verdicttype timer\"),\n    timerOps: words(\"read running start stop timeout\"),\n    portOps: words(\"call catch check clear getcall getreply halt raise receive\" + \" reply send trigger\"),\n    configOps: words(\"create connect disconnect done kill killed map unmap\"),\n    verdictOps: words(\"getverdict setverdict\"),\n    sutOps: words(\"action\"),\n    functionOps: words(\"apply derefers refers\"),\n    verdictConsts: words(\"error fail inconc none pass\"),\n    booleanConsts: words(\"true false\"),\n    otherConsts: words(\"null NULL omit\"),\n    visibilityModifiers: words(\"private public friend\"),\n    templateMatch: words(\"complement ifpresent subset superset permutation\"),\n    multiLineStrings: true\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","parserConfig","indentUnit","keywords","builtin","timerOps","portOps","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","types","visibilityModifiers","templateMatch","multiLineStrings","indentStatements","isOperatorChar","curPunc","tokenBase","stream","state","ch","next","tokenize","tokenString","test","skipToEnd","eatWhile","eat","tokenComment","match","cur","current","propertyIsEnumerable","quote","escaped","end","afterQuote","peek","toLowerCase","maybeEnd","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","blockCommentStart","blockCommentEnd","lineComment","fold","words","str","obj","split","i","length","def","mimes","mode","add","prop","hasOwnProperty","push","helperType","registerHelper","defineMIME","name"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/ttcn/ttcn.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        builtin = parserConfig.builtin || {},\n        timerOps = parserConfig.timerOps || {},\n        portOps  = parserConfig.portOps || {},\n        configOps = parserConfig.configOps || {},\n        verdictOps = parserConfig.verdictOps || {},\n        sutOps = parserConfig.sutOps || {},\n        functionOps = parserConfig.functionOps || {},\n\n        verdictConsts = parserConfig.verdictConsts || {},\n        booleanConsts = parserConfig.booleanConsts || {},\n        otherConsts   = parserConfig.otherConsts || {},\n\n        types = parserConfig.types || {},\n        visibilityModifiers = parserConfig.visibilityModifiers || {},\n        templateMatch = parserConfig.templateMatch || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[+\\-*&@=<>!\\/]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\"){\n        stream.skipToEnd();\n        return \"atom preprocessor\";\n      }\n      if (ch == \"%\"){\n        stream.eatWhile(/\\b/);\n        return \"atom ttcn3Macros\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (isOperatorChar.test(ch)) {\n        if(ch == \"@\"){\n          if(stream.match(\"try\") || stream.match(\"catch\")\n              || stream.match(\"lazy\")){\n            return \"keyword\";\n          }\n        }\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      var cur = stream.current();\n\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n      if (timerOps.propertyIsEnumerable(cur)) return \"def timerOps\";\n      if (configOps.propertyIsEnumerable(cur)) return \"def configOps\";\n      if (verdictOps.propertyIsEnumerable(cur)) return \"def verdictOps\";\n      if (portOps.propertyIsEnumerable(cur)) return \"def portOps\";\n      if (sutOps.propertyIsEnumerable(cur)) return \"def sutOps\";\n      if (functionOps.propertyIsEnumerable(cur)) return \"def functionOps\";\n\n      if (verdictConsts.propertyIsEnumerable(cur)) return \"string verdictConsts\";\n      if (booleanConsts.propertyIsEnumerable(cur)) return \"string booleanConsts\";\n      if (otherConsts.propertyIsEnumerable(cur)) return \"string otherConsts\";\n\n      if (types.propertyIsEnumerable(cur)) return \"builtin types\";\n      if (visibilityModifiers.propertyIsEnumerable(cur))\n        return \"builtin visibilityModifiers\";\n      if (templateMatch.propertyIsEnumerable(cur)) return \"atom templateMatch\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterQuote = stream.peek();\n            //look if the character after the quote is like the B in '10100010'B\n            if (afterQuote){\n              afterQuote = afterQuote.toLowerCase();\n              if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"/\" && maybeEnd) {\n          state.tokenize = null;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements &&\n            (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n            (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n\n        state.startOfLine = false;\n\n        return style;\n      },\n\n      electricChars: \"{}\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      lineComment: \"//\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  function def(mimes, mode) {\n    if (typeof mimes == \"string\") mimes = [mimes];\n    var words = [];\n    function add(obj) {\n      if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n        words.push(prop);\n    }\n\n    add(mode.keywords);\n    add(mode.builtin);\n    add(mode.timerOps);\n    add(mode.portOps);\n\n    if (words.length) {\n      mode.helperType = mimes[0];\n      CodeMirror.registerHelper(\"hintWords\", mimes[0], words);\n    }\n\n    for (var i = 0; i < mimes.length; ++i)\n      CodeMirror.defineMIME(mimes[i], mode);\n  }\n\n  def([\"text/x-ttcn\", \"text/x-ttcn3\", \"text/x-ttcnpp\"], {\n    name: \"ttcn\",\n    keywords: words(\"activate address alive all alt altstep and and4b any\" +\n    \" break case component const continue control deactivate\" +\n    \" display do else encode enumerated except exception\" +\n    \" execute extends extension external for from function\" +\n    \" goto group if import in infinity inout interleave\" +\n    \" label language length log match message mixed mod\" +\n    \" modifies module modulepar mtc noblock not not4b nowait\" +\n    \" of on optional or or4b out override param pattern port\" +\n    \" procedure record recursive rem repeat return runs select\" +\n    \" self sender set signature system template testcase to\" +\n    \" type union value valueof var variant while with xor xor4b\"),\n    builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n    \" decomp decvalue float2int float2str hex2bit hex2int\" +\n    \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n    \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n    \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n    \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n    \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n    \" enum2int\"),\n    types: words(\"anytype bitstring boolean char charstring default float\" +\n    \" hexstring integer objid octetstring universal verdicttype timer\"),\n    timerOps: words(\"read running start stop timeout\"),\n    portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n    \" reply send trigger\"),\n    configOps: words(\"create connect disconnect done kill killed map unmap\"),\n    verdictOps: words(\"getverdict setverdict\"),\n    sutOps: words(\"action\"),\n    functionOps: words(\"apply derefers refers\"),\n\n    verdictConsts: words(\"error fail inconc none pass\"),\n    booleanConsts: words(\"true false\"),\n    otherConsts: words(\"null NULL omit\"),\n\n    visibilityModifiers: words(\"private public friend\"),\n    templateMatch: words(\"complement ifpresent subset superset permutation\"),\n    multiLineStrings: true\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}