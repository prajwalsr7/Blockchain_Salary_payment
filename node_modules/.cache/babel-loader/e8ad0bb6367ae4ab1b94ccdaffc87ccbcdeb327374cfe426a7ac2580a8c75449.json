{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  // full haml mode. This handled embedded ruby and html fragments too\n  CodeMirror.defineMode(\"haml\", function (config) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"htmlmixed\"\n    });\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n    function rubyInQuote(endQuote) {\n      return function (stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      return rubyMode.token(stream, state.rubyState);\n    }\n    function html(stream, state) {\n      var ch = stream.peek();\n\n      // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n      if (state.previousToken.style == \"comment\") {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\") {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if (ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      }\n\n      // do not handle --> as valid ruby, make it HTML close comment instead\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\")) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n      if (state.previousToken.style == \"hamlTag\" || state.previousToken.style == \"closeAttributeTag\" || state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n      return htmlMode.token(stream, state.htmlState);\n    }\n    return {\n      // default to html mode\n      startState: function () {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: {\n            style: null,\n            indented: 0\n          },\n          tokenize: html\n        };\n      },\n      copyState: function (state) {\n        return {\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n      token: function (stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n        if (style && style != \"commentLine\") {\n          state.previousToken = {\n            style: style,\n            indented: state.indented\n          };\n        }\n        // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        }\n        // reprocess some of the specific style tag when finish setting previousToken\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","htmlMode","getMode","name","rubyMode","rubyInQuote","endQuote","stream","state","ch","peek","rubyState","tokenize","length","next","html","ruby","match","skipToEnd","token","previousToken","style","indented","startOfLine","htmlState","startState","copyState","sol","indentation","eatSpace","eol","backUp","defineMIME"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/haml/haml.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\n  // full haml mode. This handled embedded ruby and html fragments too\n  CodeMirror.defineMode(\"haml\", function(config) {\n    var htmlMode = CodeMirror.getMode(config, {name: \"htmlmixed\"});\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function(stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek();\n\n      // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n      if (state.previousToken.style == \"comment\" ) {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\" ) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if ( ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      }\n\n      // do not handle --> as valid ruby, make it HTML close comment instead\n      if (state.startOfLine && !stream.match(\"-->\", false) && (ch == \"=\" || ch == \"-\" )) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" ||\n          state.previousToken.style == \"closeAttributeTag\" ||\n          state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: { style: null, indented: 0},\n          tokenize: html\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          htmlState : CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n        if (style && style != \"commentLine\") {\n          state.previousToken = { style: style, indented: state.indented };\n        }\n        // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        }\n        // reprocess some of the specific style tag when finish setting previousToken\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}