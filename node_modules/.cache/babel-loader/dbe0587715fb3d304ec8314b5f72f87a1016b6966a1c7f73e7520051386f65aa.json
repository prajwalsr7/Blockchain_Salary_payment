{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Author: Aliaksei Chapyzhenka\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function toWordList(words) {\n    var ret = [];\n    words.split(' ').forEach(function (e) {\n      ret.push({\n        name: e\n      });\n    });\n    return ret;\n  }\n  var coreWordList = toWordList('INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n  var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n  CodeMirror.defineMode('forth', function () {\n    function searchWordList(wordList, word) {\n      var i;\n      for (i = wordList.length - 1; i >= 0; i--) {\n        if (wordList[i].name === word.toUpperCase()) {\n          return wordList[i];\n        }\n      }\n      return undefined;\n    }\n    return {\n      startState: function () {\n        return {\n          state: '',\n          base: 10,\n          coreWordList: coreWordList,\n          immediateWordList: immediateWordList,\n          wordList: []\n        };\n      },\n      token: function (stream, stt) {\n        var mat;\n        if (stream.eatSpace()) {\n          return null;\n        }\n        if (stt.state === '') {\n          // interpretation\n          if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n            stt.state = ' compilation';\n            return 'builtin compilation';\n          }\n          mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n          if (mat) {\n            stt.wordList.push({\n              name: mat[2].toUpperCase()\n            });\n            stt.state = ' compilation';\n            return 'def' + stt.state;\n          }\n          mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n          if (mat) {\n            stt.wordList.push({\n              name: mat[2].toUpperCase()\n            });\n            return 'def' + stt.state;\n          }\n          mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n          if (mat) {\n            return 'builtin' + stt.state;\n          }\n        } else {\n          // compilation\n          // ; [\n          if (stream.match(/^(\\;|\\[)(\\s)/)) {\n            stt.state = '';\n            stream.backUp(1);\n            return 'builtin compilation';\n          }\n          if (stream.match(/^(\\;|\\[)($)/)) {\n            stt.state = '';\n            return 'builtin compilation';\n          }\n          if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n            return 'builtin';\n          }\n        }\n\n        // dynamic wordlist\n        mat = stream.match(/^(\\S+)(\\s+|$)/);\n        if (mat) {\n          if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n            return 'variable' + stt.state;\n          }\n\n          // comments\n          if (mat[1] === '\\\\') {\n            stream.skipToEnd();\n            return 'comment' + stt.state;\n          }\n\n          // core words\n          if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n            return 'builtin' + stt.state;\n          }\n          if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n            return 'keyword' + stt.state;\n          }\n          if (mat[1] === '(') {\n            stream.eatWhile(function (s) {\n              return s !== ')';\n            });\n            stream.eat(')');\n            return 'comment' + stt.state;\n          }\n\n          // // strings\n          if (mat[1] === '.(') {\n            stream.eatWhile(function (s) {\n              return s !== ')';\n            });\n            stream.eat(')');\n            return 'string' + stt.state;\n          }\n          if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n            stream.eatWhile(function (s) {\n              return s !== '\"';\n            });\n            stream.eat('\"');\n            return 'string' + stt.state;\n          }\n\n          // numbers\n          if (mat[1] - 0xfffffffff) {\n            return 'number' + stt.state;\n          }\n          // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n          //     return 'number' + stt.state;\n          // }\n\n          return 'atom' + stt.state;\n        }\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-forth\", \"forth\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","toWordList","words","ret","split","forEach","e","push","name","coreWordList","immediateWordList","defineMode","searchWordList","wordList","word","i","length","toUpperCase","undefined","startState","state","base","token","stream","stt","mat","eatSpace","match","backUp","skipToEnd","eatWhile","s","eat","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/forth/forth.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Author: Aliaksei Chapyzhenka\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function toWordList(words) {\n    var ret = [];\n    words.split(' ').forEach(function(e){\n      ret.push({name: e});\n    });\n    return ret;\n  }\n\n  var coreWordList = toWordList(\n'INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n\n  var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n\n  CodeMirror.defineMode('forth', function() {\n    function searchWordList (wordList, word) {\n      var i;\n      for (i = wordList.length - 1; i >= 0; i--) {\n        if (wordList[i].name === word.toUpperCase()) {\n          return wordList[i];\n        }\n      }\n      return undefined;\n    }\n  return {\n    startState: function() {\n      return {\n        state: '',\n        base: 10,\n        coreWordList: coreWordList,\n        immediateWordList: immediateWordList,\n        wordList: []\n      };\n    },\n    token: function (stream, stt) {\n      var mat;\n      if (stream.eatSpace()) {\n        return null;\n      }\n      if (stt.state === '') { // interpretation\n        if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n          stt.state = ' compilation';\n          return 'builtin compilation';\n        }\n        mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          stt.state = ' compilation';\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          return 'builtin' + stt.state;\n        }\n        } else { // compilation\n        // ; [\n        if (stream.match(/^(\\;|\\[)(\\s)/)) {\n          stt.state = '';\n          stream.backUp(1);\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(\\;|\\[)($)/)) {\n          stt.state = '';\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n          return 'builtin';\n        }\n      }\n\n      // dynamic wordlist\n      mat = stream.match(/^(\\S+)(\\s+|$)/);\n      if (mat) {\n        if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n          return 'variable' + stt.state;\n        }\n\n        // comments\n        if (mat[1] === '\\\\') {\n          stream.skipToEnd();\n            return 'comment' + stt.state;\n          }\n\n          // core words\n          if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n            return 'builtin' + stt.state;\n          }\n          if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n            return 'keyword' + stt.state;\n          }\n\n          if (mat[1] === '(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'comment' + stt.state;\n          }\n\n          // // strings\n          if (mat[1] === '.(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'string' + stt.state;\n          }\n          if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n            stream.eatWhile(function (s) { return s !== '\"'; });\n            stream.eat('\"');\n            return 'string' + stt.state;\n          }\n\n          // numbers\n          if (mat[1] - 0xfffffffff) {\n            return 'number' + stt.state;\n          }\n          // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n          //     return 'number' + stt.state;\n          // }\n\n          return 'atom' + stt.state;\n        }\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-forth\", \"forth\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}