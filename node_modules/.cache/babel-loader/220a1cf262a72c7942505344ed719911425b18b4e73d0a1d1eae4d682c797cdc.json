{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Factor syntax highlight - simple mode\n//\n// by Dimage Sapelkin (https://github.com/kerabromsmu)\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"factor\", {\n    // The start state contains the rules that are initially used\n    start: [\n    // comments\n    {\n      regex: /#?!.*/,\n      token: \"comment\"\n    },\n    // strings \"\"\", multiline --> state\n    {\n      regex: /\"\"\"/,\n      token: \"string\",\n      next: \"string3\"\n    }, {\n      regex: /(STRING:)(\\s)/,\n      token: [\"keyword\", null],\n      next: \"string2\"\n    }, {\n      regex: /\\S*?\"/,\n      token: \"string\",\n      next: \"string\"\n    },\n    // numbers: dec, hex, unicode, bin, fractional, complex\n    {\n      regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/,\n      token: \"number\"\n    },\n    //{regex: /[+-]?/} //fractional\n    // definition: defining word, defined word, etc\n    {\n      regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/,\n      token: [\"keyword\", null, \"def\", null, \"bracket\"],\n      next: \"stack\"\n    },\n    // method definition: defining word, type, defined word, etc\n    {\n      regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/,\n      token: [\"keyword\", null, \"def\", null, \"tag\"]\n    },\n    // vocabulary using --> state\n    {\n      regex: /USING\\:/,\n      token: \"keyword\",\n      next: \"vocabulary\"\n    },\n    // vocabulary definition/use\n    {\n      regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/,\n      token: [\"keyword\", null, \"tag\"]\n    },\n    // definition: a defining word, defined word\n    {\n      regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/,\n      token: [\"keyword\", null, \"def\"]\n    },\n    // \"keywords\", incl. ; t f . [ ] { } defining words\n    {\n      regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/,\n      token: \"keyword\"\n    },\n    // <constructors> and the like\n    {\n      regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/,\n      token: \"builtin\"\n    }, {\n      regex: /[\\)><]+\\S+(?=\\s|$)/,\n      token: \"builtin\"\n    },\n    // operators\n    {\n      regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/,\n      token: \"keyword\"\n    },\n    // any id (?)\n    {\n      regex: /\\S+/,\n      token: \"variable\"\n    }, {\n      regex: /\\s+|./,\n      token: null\n    }],\n    vocabulary: [{\n      regex: /;/,\n      token: \"keyword\",\n      next: \"start\"\n    }, {\n      regex: /\\S+/,\n      token: \"tag\"\n    }, {\n      regex: /\\s+|./,\n      token: null\n    }],\n    string: [{\n      regex: /(?:[^\\\\]|\\\\.)*?\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"string\"\n    }],\n    string2: [{\n      regex: /^;/,\n      token: \"keyword\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"string\"\n    }],\n    string3: [{\n      regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/,\n      token: \"string\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"string\"\n    }],\n    stack: [{\n      regex: /\\)/,\n      token: \"bracket\",\n      next: \"start\"\n    }, {\n      regex: /--/,\n      token: \"bracket\"\n    }, {\n      regex: /\\S+/,\n      token: \"meta\"\n    }, {\n      regex: /\\s+|./,\n      token: null\n    }],\n    // The meta property contains global information about the mode. It\n    // can contain properties like lineComment, which are supported by\n    // all modes, and also directives like dontIndentStates, which are\n    // specific to simple modes.\n    meta: {\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      lineComment: [\"!\", \"#!\"]\n    }\n  });\n  CodeMirror.defineMIME(\"text/x-factor\", \"factor\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineSimpleMode","start","regex","token","next","vocabulary","string","string2","string3","stack","meta","dontIndentStates","lineComment","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/factor/factor.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Factor syntax highlight - simple mode\n//\n// by Dimage Sapelkin (https://github.com/kerabromsmu)\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"factor\", {\n    // The start state contains the rules that are initially used\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    // The meta property contains global information about the mode. It\n    // can contain properties like lineComment, which are supported by\n    // all modes, and also directives like dontIndentStates, which are\n    // specific to simple modes.\n    meta: {\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      lineComment: [ \"!\", \"#!\" ]\n    }\n  });\n\n  CodeMirror.defineMIME(\"text/x-factor\", \"factor\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}