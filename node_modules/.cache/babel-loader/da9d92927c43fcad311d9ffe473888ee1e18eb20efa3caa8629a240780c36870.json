{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n  function Context(state, mode, depth, prev) {\n    this.state = state;\n    this.mode = mode;\n    this.depth = depth;\n    this.prev = prev;\n  }\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state), context.mode, context.depth, context.prev && copyContext(context.prev));\n  }\n  CodeMirror.defineMode(\"jsx\", function (config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      allowMissing: true,\n      multilineTagIndentPastTag: false,\n      allowMissingTagName: true\n    });\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\");\n    function flatXMLIndent(state) {\n      var tagName = state.tagName;\n      state.tagName = null;\n      var result = xmlMode.indent(state, \"\", \"\");\n      state.tagName = tagName;\n      return result;\n    }\n    function token(stream, state) {\n      if (state.context.mode == xmlMode) return xmlToken(stream, state, state.context);else return jsToken(stream, state, state.context);\n    }\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) {\n        // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1;else stream.skipToEnd();\n        return \"comment\";\n      }\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state);\n        var indent = flatXMLIndent(cx.state),\n          xmlContext = cx.state.context;\n        // If JS starts on same line as tag\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine) xmlContext = xmlContext.prev;\n          // If tag starts the line, use XML indentation level\n          if (xmlContext.startOfLine) indent -= config.indentUnit;\n          // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented;\n          // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit;\n        }\n        state.context = new Context(CodeMirror.startState(jsMode, indent), jsMode, 0, state.context);\n        return null;\n      }\n      if (cx.depth == 1) {\n        // Inside of tag\n        if (stream.peek() == \"<\") {\n          // Tag inside of tag\n          xmlMode.skipAttribute(cx.state);\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)), xmlMode, 0, state.context);\n          return null;\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2;\n          return token(stream, state);\n        }\n      }\n      var style = xmlMode.token(stream, cx.state),\n        cur = stream.current(),\n        stop;\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0;else state.context = state.context.prev;\n        } else if (/^</.test(cur)) {\n          cx.depth = 1;\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop);\n      }\n      return style;\n    }\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\", \"\")), xmlMode, 0, state.context);\n        jsMode.skipExpression(cx.state);\n        return null;\n      }\n      var style = jsMode.token(stream, cx.state);\n      if (!style && cx.depth != null) {\n        var cur = stream.current();\n        if (cur == \"{\") {\n          cx.depth++;\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev;\n        }\n      }\n      return style;\n    }\n    return {\n      startState: function () {\n        return {\n          context: new Context(CodeMirror.startState(jsMode), jsMode)\n        };\n      },\n      copyState: function (state) {\n        return {\n          context: copyContext(state.context)\n        };\n      },\n      token: token,\n      indent: function (state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine);\n      },\n      innerMode: function (state) {\n        return state.context;\n      }\n    };\n  }, \"xml\", \"javascript\");\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\");\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {\n    name: \"jsx\",\n    base: {\n      name: \"javascript\",\n      typescript: true\n    }\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","Context","state","mode","depth","prev","copyContext","context","copyState","defineMode","config","modeConfig","xmlMode","getMode","name","allowMissing","multilineTagIndentPastTag","allowMissingTagName","jsMode","base","flatXMLIndent","tagName","result","indent","token","stream","xmlToken","jsToken","cx","match","skipToEnd","peek","skipAttribute","xmlContext","startOfLine","indentUnit","lexical","indented","startState","style","cur","current","stop","test","indexOf","backUp","length","expressionAllowed","skipExpression","textAfter","fullLine","innerMode","defineMIME","typescript"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/jsx/jsx.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n\n  // Depth means the amount of open braces in JS context, in XML\n  // context 0 means not in tag, 1 means in tag, and 2 means in tag\n  // and js block comment.\n  function Context(state, mode, depth, prev) {\n    this.state = state; this.mode = mode; this.depth = depth; this.prev = prev\n  }\n\n  function copyContext(context) {\n    return new Context(CodeMirror.copyState(context.mode, context.state),\n                       context.mode,\n                       context.depth,\n                       context.prev && copyContext(context.prev))\n  }\n\n  CodeMirror.defineMode(\"jsx\", function(config, modeConfig) {\n    var xmlMode = CodeMirror.getMode(config, {name: \"xml\", allowMissing: true, multilineTagIndentPastTag: false, allowMissingTagName: true})\n    var jsMode = CodeMirror.getMode(config, modeConfig && modeConfig.base || \"javascript\")\n\n    function flatXMLIndent(state) {\n      var tagName = state.tagName\n      state.tagName = null\n      var result = xmlMode.indent(state, \"\", \"\")\n      state.tagName = tagName\n      return result\n    }\n\n    function token(stream, state) {\n      if (state.context.mode == xmlMode)\n        return xmlToken(stream, state, state.context)\n      else\n        return jsToken(stream, state, state.context)\n    }\n\n    function xmlToken(stream, state, cx) {\n      if (cx.depth == 2) { // Inside a JS /* */ comment\n        if (stream.match(/^.*?\\*\\//)) cx.depth = 1\n        else stream.skipToEnd()\n        return \"comment\"\n      }\n\n      if (stream.peek() == \"{\") {\n        xmlMode.skipAttribute(cx.state)\n\n        var indent = flatXMLIndent(cx.state), xmlContext = cx.state.context\n        // If JS starts on same line as tag\n        if (xmlContext && stream.match(/^[^>]*>\\s*$/, false)) {\n          while (xmlContext.prev && !xmlContext.startOfLine)\n            xmlContext = xmlContext.prev\n          // If tag starts the line, use XML indentation level\n          if (xmlContext.startOfLine) indent -= config.indentUnit\n          // Else use JS indentation level\n          else if (cx.prev.state.lexical) indent = cx.prev.state.lexical.indented\n        // Else if inside of tag\n        } else if (cx.depth == 1) {\n          indent += config.indentUnit\n        }\n\n        state.context = new Context(CodeMirror.startState(jsMode, indent),\n                                    jsMode, 0, state.context)\n        return null\n      }\n\n      if (cx.depth == 1) { // Inside of tag\n        if (stream.peek() == \"<\") { // Tag inside of tag\n          xmlMode.skipAttribute(cx.state)\n          state.context = new Context(CodeMirror.startState(xmlMode, flatXMLIndent(cx.state)),\n                                      xmlMode, 0, state.context)\n          return null\n        } else if (stream.match(\"//\")) {\n          stream.skipToEnd()\n          return \"comment\"\n        } else if (stream.match(\"/*\")) {\n          cx.depth = 2\n          return token(stream, state)\n        }\n      }\n\n      var style = xmlMode.token(stream, cx.state), cur = stream.current(), stop\n      if (/\\btag\\b/.test(style)) {\n        if (/>$/.test(cur)) {\n          if (cx.state.context) cx.depth = 0\n          else state.context = state.context.prev\n        } else if (/^</.test(cur)) {\n          cx.depth = 1\n        }\n      } else if (!style && (stop = cur.indexOf(\"{\")) > -1) {\n        stream.backUp(cur.length - stop)\n      }\n      return style\n    }\n\n    function jsToken(stream, state, cx) {\n      if (stream.peek() == \"<\" && jsMode.expressionAllowed(stream, cx.state)) {\n        state.context = new Context(CodeMirror.startState(xmlMode, jsMode.indent(cx.state, \"\", \"\")),\n                                    xmlMode, 0, state.context)\n        jsMode.skipExpression(cx.state)\n        return null\n      }\n\n      var style = jsMode.token(stream, cx.state)\n      if (!style && cx.depth != null) {\n        var cur = stream.current()\n        if (cur == \"{\") {\n          cx.depth++\n        } else if (cur == \"}\") {\n          if (--cx.depth == 0) state.context = state.context.prev\n        }\n      }\n      return style\n    }\n\n    return {\n      startState: function() {\n        return {context: new Context(CodeMirror.startState(jsMode), jsMode)}\n      },\n\n      copyState: function(state) {\n        return {context: copyContext(state.context)}\n      },\n\n      token: token,\n\n      indent: function(state, textAfter, fullLine) {\n        return state.context.mode.indent(state.context.state, textAfter, fullLine)\n      },\n\n      innerMode: function(state) {\n        return state.context\n      }\n    }\n  }, \"xml\", \"javascript\")\n\n  CodeMirror.defineMIME(\"text/jsx\", \"jsx\")\n  CodeMirror.defineMIME(\"text/typescript-jsx\", {name: \"jsx\", base: {name: \"javascript\", typescript: true}})\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}