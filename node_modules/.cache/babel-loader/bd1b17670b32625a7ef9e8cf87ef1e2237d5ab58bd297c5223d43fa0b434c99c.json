{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n  ;\n  var builtinArray = [\"Clamp\", \"Constructor\", \"EnforceRange\", \"Exposed\", \"ImplicitThis\", \"Global\", \"PrimaryGlobal\", \"LegacyArrayClass\", \"LegacyUnenumerableNamedProperties\", \"LenientThis\", \"NamedConstructor\", \"NewObject\", \"NoInterfaceObject\", \"OverrideBuiltins\", \"PutForwards\", \"Replaceable\", \"SameObject\", \"TreatNonObjectAsNull\", \"TreatNullAs\", \"EmptyString\", \"Unforgeable\", \"Unscopeable\"];\n  var builtins = wordRegexp(builtinArray);\n  var typeArray = [\"unsigned\", \"short\", \"long\",\n  // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\",\n  // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\",\n  // Rest of PrimitiveType\n  \"Promise\",\n  // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\", \"Float32Array\", \"Float64Array\",\n  // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\", \"Error\", \"DOMException\", \"FrozenArray\",\n  // Rest of NonAnyType\n  \"any\",\n  // Rest of SingleType\n  \"void\" // Rest of ReturnType\n  ];\n  var types = wordRegexp(typeArray);\n  var keywordArray = [\"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\", \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\", \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\", \"stringifier\", \"typedef\",\n  // ArgumentNameKeyword except\n  // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"];\n  var keywords = wordRegexp(keywordArray);\n  var atomArray = [\"true\", \"false\",\n  // BooleanLiteral\n  \"Infinity\", \"NaN\",\n  // FloatLiteral\n  \"null\" // Rest of ConstValue\n  ];\n  var atoms = wordRegexp(atomArray);\n  CodeMirror.registerHelper(\"hintWords\", \"webidl\", builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray));\n  var startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\n  var startDefs = wordRegexp(startDefArray);\n  var endDefArray = [\"typedef\"];\n  var endDefs = wordRegexp(endDefArray);\n  var singleOperators = /^[:<=>?]/;\n  var integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\n  var floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\n  var identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\n  var identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\n  var strings = /^\"[^\"]*\"/;\n  var multilineComments = /^\\/\\*.*?\\*\\//;\n  var multilineCommentsStart = /^\\/\\*.*/;\n  var multilineCommentsEnd = /^.*?\\*\\//;\n  function readToken(stream, state) {\n    // whitespace\n    if (stream.eatSpace()) return null;\n\n    // comment\n    if (state.inComment) {\n      if (stream.match(multilineCommentsEnd)) {\n        state.inComment = false;\n        return \"comment\";\n      }\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (stream.match(multilineComments)) return \"comment\";\n    if (stream.match(multilineCommentsStart)) {\n      state.inComment = true;\n      return \"comment\";\n    }\n\n    // integer and float\n    if (stream.match(/^-?[0-9\\.]/, false)) {\n      if (stream.match(integers) || stream.match(floats)) return \"number\";\n    }\n\n    // string\n    if (stream.match(strings)) return \"string\";\n\n    // identifier\n    if (state.startDef && stream.match(identifiers)) return \"def\";\n    if (state.endDef && stream.match(identifiersEnd)) {\n      state.endDef = false;\n      return \"def\";\n    }\n    if (stream.match(keywords)) return \"keyword\";\n    if (stream.match(types)) {\n      var lastToken = state.lastToken;\n      var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n      if (lastToken === \":\" || lastToken === \"implements\" || nextToken === \"implements\" || nextToken === \"=\") {\n        // Used as identifier\n        return \"builtin\";\n      } else {\n        // Used as type\n        return \"variable-3\";\n      }\n    }\n    if (stream.match(builtins)) return \"builtin\";\n    if (stream.match(atoms)) return \"atom\";\n    if (stream.match(identifiers)) return \"variable\";\n\n    // other\n    if (stream.match(singleOperators)) return \"operator\";\n\n    // unrecognized\n    stream.next();\n    return null;\n  }\n  ;\n  CodeMirror.defineMode(\"webidl\", function () {\n    return {\n      startState: function () {\n        return {\n          // Is in multiline comment\n          inComment: false,\n          // Last non-whitespace, matched token\n          lastToken: \"\",\n          // Next token is a definition\n          startDef: false,\n          // Last token of the statement is a definition\n          endDef: false\n        };\n      },\n      token: function (stream, state) {\n        var style = readToken(stream, state);\n        if (style) {\n          var cur = stream.current();\n          state.lastToken = cur;\n          if (style === \"keyword\") {\n            state.startDef = startDefs.test(cur);\n            state.endDef = state.endDef || endDefs.test(cur);\n          } else {\n            state.startDef = false;\n          }\n        }\n        return style;\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-webidl\", \"webidl\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","wordRegexp","words","RegExp","join","builtinArray","builtins","typeArray","types","keywordArray","keywords","atomArray","atoms","registerHelper","concat","startDefArray","startDefs","endDefArray","endDefs","singleOperators","integers","floats","identifiers","identifiersEnd","strings","multilineComments","multilineCommentsStart","multilineCommentsEnd","readToken","stream","state","eatSpace","inComment","match","skipToEnd","startDef","endDef","lastToken","nextToken","next","defineMode","startState","token","style","cur","current","test","defineMIME"],"sources":["C:/Users/User/Downloads/Multisender-App-main/node_modules/codemirror/mode/webidl/webidl.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n};\n\nvar builtinArray = [\n  \"Clamp\",\n  \"Constructor\",\n  \"EnforceRange\",\n  \"Exposed\",\n  \"ImplicitThis\",\n  \"Global\", \"PrimaryGlobal\",\n  \"LegacyArrayClass\",\n  \"LegacyUnenumerableNamedProperties\",\n  \"LenientThis\",\n  \"NamedConstructor\",\n  \"NewObject\",\n  \"NoInterfaceObject\",\n  \"OverrideBuiltins\",\n  \"PutForwards\",\n  \"Replaceable\",\n  \"SameObject\",\n  \"TreatNonObjectAsNull\",\n  \"TreatNullAs\",\n    \"EmptyString\",\n  \"Unforgeable\",\n  \"Unscopeable\"\n];\nvar builtins = wordRegexp(builtinArray);\n\nvar typeArray = [\n  \"unsigned\", \"short\", \"long\",                  // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\",            // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\",                   // Rest of PrimitiveType\n  \"Promise\",                                    // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\",\n  \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\",\n  \"Float32Array\", \"Float64Array\",               // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\",\n  \"Error\", \"DOMException\", \"FrozenArray\",       // Rest of NonAnyType\n  \"any\",                                        // Rest of SingleType\n  \"void\"                                        // Rest of ReturnType\n];\nvar types = wordRegexp(typeArray);\n\nvar keywordArray = [\n  \"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\",\n  \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\",\n  \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\",\n  \"stringifier\", \"typedef\",                     // ArgumentNameKeyword except\n                                                // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"\n];\nvar keywords = wordRegexp(keywordArray);\n\nvar atomArray = [\n  \"true\", \"false\",                              // BooleanLiteral\n  \"Infinity\", \"NaN\",                            // FloatLiteral\n  \"null\"                                        // Rest of ConstValue\n];\nvar atoms = wordRegexp(atomArray);\n\nCodeMirror.registerHelper(\"hintWords\", \"webidl\",\n    builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray));\n\nvar startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\nvar startDefs = wordRegexp(startDefArray);\n\nvar endDefArray = [\"typedef\"];\nvar endDefs = wordRegexp(endDefArray);\n\nvar singleOperators = /^[:<=>?]/;\nvar integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\nvar floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\nvar identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\nvar identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\nvar strings = /^\"[^\"]*\"/;\nvar multilineComments = /^\\/\\*.*?\\*\\//;\nvar multilineCommentsStart = /^\\/\\*.*/;\nvar multilineCommentsEnd = /^.*?\\*\\//;\n\nfunction readToken(stream, state) {\n  // whitespace\n  if (stream.eatSpace()) return null;\n\n  // comment\n  if (state.inComment) {\n    if (stream.match(multilineCommentsEnd)) {\n      state.inComment = false;\n      return \"comment\";\n    }\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(multilineComments)) return \"comment\";\n  if (stream.match(multilineCommentsStart)) {\n    state.inComment = true;\n    return \"comment\";\n  }\n\n  // integer and float\n  if (stream.match(/^-?[0-9\\.]/, false)) {\n    if (stream.match(integers) || stream.match(floats)) return \"number\";\n  }\n\n  // string\n  if (stream.match(strings)) return \"string\";\n\n  // identifier\n  if (state.startDef && stream.match(identifiers)) return \"def\";\n\n  if (state.endDef && stream.match(identifiersEnd)) {\n    state.endDef = false;\n    return \"def\";\n  }\n\n  if (stream.match(keywords)) return \"keyword\";\n\n  if (stream.match(types)) {\n    var lastToken = state.lastToken;\n    var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n    if (lastToken === \":\" || lastToken === \"implements\" ||\n        nextToken === \"implements\" || nextToken === \"=\") {\n      // Used as identifier\n      return \"builtin\";\n    } else {\n      // Used as type\n      return \"variable-3\";\n    }\n  }\n\n  if (stream.match(builtins)) return \"builtin\";\n  if (stream.match(atoms)) return \"atom\";\n  if (stream.match(identifiers)) return \"variable\";\n\n  // other\n  if (stream.match(singleOperators)) return \"operator\";\n\n  // unrecognized\n  stream.next();\n  return null;\n};\n\nCodeMirror.defineMode(\"webidl\", function() {\n  return {\n    startState: function() {\n      return {\n        // Is in multiline comment\n        inComment: false,\n        // Last non-whitespace, matched token\n        lastToken: \"\",\n        // Next token is a definition\n        startDef: false,\n        // Last token of the statement is a definition\n        endDef: false\n      };\n    },\n    token: function(stream, state) {\n      var style = readToken(stream, state);\n\n      if (style) {\n        var cur = stream.current();\n        state.lastToken = cur;\n        if (style === \"keyword\") {\n          state.startDef = startDefs.test(cur);\n          state.endDef = state.endDef || endDefs.test(cur);\n        } else {\n          state.startDef = false;\n        }\n      }\n\n      return style;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-webidl\", \"webidl\");\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}