{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"sparql\", function (config) {\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    function wordRegexp(words) {\n      return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n    }\n    var ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\", \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\", \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\", \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\", \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\", \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\", \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\", \"isblank\", \"isliteral\", \"a\", \"bind\"]);\n    var keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\", \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\", \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\", \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\", \"true\", \"false\", \"with\", \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\"]);\n    var operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      curPunc = null;\n      if (ch == \"$\" || ch == \"?\") {\n        if (ch == \"?\" && stream.match(/\\s/, false)) {\n          return \"operator\";\n        }\n        stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n        return \"variable-2\";\n      } else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n        stream.match(/^[^\\s\\u00a0>]*>?/);\n        return \"atom\";\n      } else if (ch == \"\\\"\" || ch == \"'\") {\n        state.tokenize = tokenLiteral(ch);\n        return state.tokenize(stream, state);\n      } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"bracket\";\n      } else if (ch == \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch === \"^\") {\n        ch = stream.peek();\n        if (ch === \"^\") stream.eat(\"^\");else stream.eatWhile(operatorChars);\n        return \"operator\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return \"operator\";\n      } else if (ch == \":\") {\n        eatPnLocal(stream);\n        return \"atom\";\n      } else if (ch == \"@\") {\n        stream.eatWhile(/[a-z\\d\\-]/i);\n        return \"meta\";\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n        if (stream.eat(\":\")) {\n          eatPnLocal(stream);\n          return \"atom\";\n        }\n        var word = stream.current();\n        if (ops.test(word)) return \"builtin\";else if (keywords.test(word)) return \"keyword\";else return \"variable\";\n      }\n    }\n    function eatPnLocal(stream) {\n      stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n    }\n    function tokenLiteral(quote) {\n      return function (stream, state) {\n        var escaped = false,\n          ch;\n        while ((ch = stream.next()) != null) {\n          if (ch == quote && !escaped) {\n            state.tokenize = tokenBase;\n            break;\n          }\n          escaped = !escaped && ch == \"\\\\\";\n        }\n        return \"string\";\n      };\n    }\n    function pushContext(state, type, col) {\n      state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    }\n    function popContext(state) {\n      state.indent = state.context.indent;\n      state.context = state.context.prev;\n    }\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function (stream, state) {\n        if (stream.sol()) {\n          if (state.context && state.context.align == null) state.context.align = false;\n          state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n          state.context.align = true;\n        }\n        if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type == \"pattern\") popContext(state);\n          if (state.context && curPunc == state.context.type) {\n            popContext(state);\n            if (curPunc == \"}\" && state.context && state.context.type == \"pattern\") popContext(state);\n          }\n        } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function (state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") context = context.prev;\n        var closing = context && firstChar == context.type;\n        if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : indentUnit);\n      },\n      lineComment: \"#\"\n    };\n  });\n  CodeMirror.defineMIME(\"application/sparql-query\", \"sparql\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","config","indentUnit","curPunc","wordRegexp","words","RegExp","join","ops","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","peek","eat","eatWhile","eatPnLocal","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME"],"sources":["C:/Users/User/Downloads/Salary Payments/node_modules/codemirror/mode/sparql/sparql.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sparql\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                        \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                        \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                        \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                        \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                        \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                        \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                        \"isblank\", \"isliteral\", \"a\", \"bind\"]);\n  var keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                             \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                             \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                             \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                             \"true\", \"false\", \"with\",\n                             \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\"]);\n  var operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"$\" || ch == \"?\") {\n      if(ch == \"?\" && stream.match(/\\s/, false)){\n        return \"operator\";\n      }\n      stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n      return \"variable-2\";\n    }\n    else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return \"bracket\";\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (ch === \"^\") {\n      ch = stream.peek();\n      if (ch === \"^\") stream.eat(\"^\");\n      else stream.eatWhile(operatorChars);\n      return \"operator\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return \"operator\";\n    }\n    else if (ch == \":\") {\n      eatPnLocal(stream);\n      return \"atom\";\n    }\n    else if (ch == \"@\") {\n      stream.eatWhile(/[a-z\\d\\-]/i);\n      return \"meta\";\n    }\n    else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if (stream.eat(\":\")) {\n        eatPnLocal(stream);\n        return \"atom\";\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return \"builtin\";\n      else if (keywords.test(word))\n        return \"keyword\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function eatPnLocal(stream) {\n    stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) {\n          popContext(state);\n          if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n            popContext(state);\n        }\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sparql-query\", \"sparql\");\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}